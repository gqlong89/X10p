<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\X10P.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\X10P.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Tue Jan 15 15:02:51 2019
<BR><P>
<H3>Maximum Stack Usage =       1504 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
CkbTask &rArr; ProcKBData &rArr; HandleCKBData &rArr; CardModuleHandle &rArr; WritePayCardHandle &rArr; StartCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[d]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SVC_Handler</a><BR>
 <LI><a href="#[11]">AES_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">AES_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">AES_IRQHandler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[39]">CkbTask</a> from card.o(i.CkbTask) referenced from main.o(i.MainTask)
 <LI><a href="#[2f]">DMA_IRQHandler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from simuart.o(i.EXTI4_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[17]">EXTI5_IRQHandler</a> from relayctrltask.o(i.EXTI5_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[18]">EXTI6_IRQHandler</a> from i2c.o(i.EXTI6_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[2c]">EXTI7_IRQHandler</a> from simuart.o(i.EXTI7_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from cpucfg.o(i.HardFault_Handler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[25]">I2C_IRQHandler</a> from i2c.o(i.I2C_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[0]">Init_Uart0</a> from usart.o(i.Init_Uart0) referenced 2 times from usart.o(.data)
 <LI><a href="#[1]">Init_Uart1</a> from usart.o(i.Init_Uart1) referenced 2 times from usart.o(.data)
 <LI><a href="#[2]">Init_Uart2</a> from usart.o(i.Init_Uart2) referenced 2 times from usart.o(.data)
 <LI><a href="#[3]">Init_Uart3</a> from usart.o(i.Init_Uart3) referenced 2 times from usart.o(.data)
 <LI><a href="#[4]">Init_Uart4</a> from usart.o(i.Init_Uart4) referenced 2 times from usart.o(.data)
 <LI><a href="#[5]">Init_Uart5</a> from usart.o(i.Init_Uart5) referenced 2 times from usart.o(.data)
 <LI><a href="#[6]">Init_Uart6</a> from usart.o(i.Init_Uart6) referenced 2 times from usart.o(.data)
 <LI><a href="#[7]">Init_Uart7</a> from usart.o(i.Init_Uart7) referenced 2 times from usart.o(.data)
 <LI><a href="#[8]">Init_Uart8</a> from usart.o(i.Init_Uart8) referenced 2 times from usart.o(.data)
 <LI><a href="#[9]">Init_Uart9</a> from usart.o(i.Init_Uart9) referenced 2 times from usart.o(.data)
 <LI><a href="#[5a]">LcdDisplayEight</a> from lcd.o(i.LcdDisplayEight) referenced from ui.o(.constdata)
 <LI><a href="#[57]">LcdDisplayFive</a> from lcd.o(i.LcdDisplayFive) referenced from ui.o(.constdata)
 <LI><a href="#[56]">LcdDisplayFour</a> from lcd.o(i.LcdDisplayFour) referenced from ui.o(.constdata)
 <LI><a href="#[5b]">LcdDisplayNine</a> from lcd.o(i.LcdDisplayNine) referenced from ui.o(.constdata)
 <LI><a href="#[53]">LcdDisplayOne</a> from lcd.o(i.LcdDisplayOne) referenced from ui.o(.constdata)
 <LI><a href="#[59]">LcdDisplaySeven</a> from lcd.o(i.LcdDisplaySeven) referenced from ui.o(.constdata)
 <LI><a href="#[58]">LcdDisplaySix</a> from lcd.o(i.LcdDisplaySix) referenced from ui.o(.constdata)
 <LI><a href="#[55]">LcdDisplayThree</a> from lcd.o(i.LcdDisplayThree) referenced from ui.o(.constdata)
 <LI><a href="#[54]">LcdDisplayTwo</a> from lcd.o(i.LcdDisplayTwo) referenced from ui.o(.constdata)
 <LI><a href="#[52]">LcdDisplayZero</a> from lcd.o(i.LcdDisplayZero) referenced from ui.o(.constdata)
 <LI><a href="#[3e]">MainTask</a> from main.o(i.MainTask) referenced from main.o(i.main)
 <LI><a href="#[b]">NMI_Handler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[10]">PMU_IRQHandler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[24]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[3b]">RelayCtrlTask</a> from relayctrltask.o(i.RelayCtrlTask) referenced from main.o(i.MainTask)
 <LI><a href="#[2d]">Reserved_IRQHandler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[26]">SPI0_IRQHandler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[27]">SPI1_IRQHandler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[28]">SelfTestFreq_IRQHandler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[37]">ServerTask</a> from server.o(i.ServerTask) referenced from main.o(i.MainTask)
 <LI><a href="#[38]">SysTask</a> from outnetproto.o(i.SysTask) referenced from main.o(i.MainTask)
 <LI><a href="#[f]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[31]">SystemInit</a> from system_ht6xxx.o(i.SystemInit) referenced from startup_ht6x3x.o(.text)
 <LI><a href="#[23]">TBS_IRQHandler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[1f]">TIMER_0_IRQHandler</a> from simuart.o(i.TIMER_0_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[20]">TIMER_1_IRQHandler</a> from simuart.o(i.TIMER_1_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[21]">TIMER_2_IRQHandler</a> from emu.o(i.TIMER_2_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[22]">TIMER_3_IRQHandler</a> from simuart.o(i.TIMER_3_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[29]">TIMER_4_IRQHandler</a> from relayctrltask.o(i.TIMER_4_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[2a]">TIMER_5_IRQHandler</a> from startup_ht6x3x.o(.text) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[19]">UART0_IRQHandler</a> from usart.o(i.UART0_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[1a]">UART1_IRQHandler</a> from usart.o(i.UART1_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[1b]">UART2_IRQHandler</a> from usart.o(i.UART2_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[1c]">UART3_IRQHandler</a> from usart.o(i.UART3_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[1d]">UART4_IRQHandler</a> from usart.o(i.UART4_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[1e]">UART5_IRQHandler</a> from usart.o(i.UART5_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[2b]">UART6_IRQHandler</a> from usart.o(i.UART6_IRQHandler) referenced from startup_ht6x3x.o(RESET)
 <LI><a href="#[32]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht6x3x.o(.text)
 <LI><a href="#[34]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[35]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[33]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3d]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[3a]">emuTask</a> from emu.o(i.emuTask) referenced from main.o(i.MainTask)
 <LI><a href="#[3c]">fputc</a> from server.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[36]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[30]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[40]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[3f]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[42]">sim800_check_ATE</a> from sim800c.o(i.sim800_check_ATE) referenced from sim800c.o(.constdata)
 <LI><a href="#[43]">sim800_check_ATI</a> from sim800c.o(i.sim800_check_ATI) referenced from sim800c.o(.constdata)
 <LI><a href="#[46]">sim800_check_CCID</a> from sim800c.o(i.sim800_check_CCID) referenced from sim800c.o(.constdata)
 <LI><a href="#[4a]">sim800_check_CGATT</a> from sim800c.o(i.sim800_check_CGATT) referenced 2 times from sim800c.o(.constdata)
 <LI><a href="#[4f]">sim800_check_CIICR</a> from sim800c.o(i.sim800_check_CIICR) referenced from sim800c.o(.constdata)
 <LI><a href="#[4c]">sim800_check_CIPMUX</a> from sim800c.o(i.sim800_check_CIPMUX) referenced from sim800c.o(.constdata)
 <LI><a href="#[48]">sim800_check_CIPRXGET</a> from sim800c.o(i.sim800_check_CIPRXGET) referenced from sim800c.o(.constdata)
 <LI><a href="#[4b]">sim800_check_CIPSHUT</a> from sim800c.o(i.sim800_check_CIPSHUT) referenced from sim800c.o(.constdata)
 <LI><a href="#[49]">sim800_check_CREG</a> from sim800c.o(i.sim800_check_CREG) referenced from sim800c.o(.constdata)
 <LI><a href="#[47]">sim800_check_CSCLK</a> from sim800c.o(i.sim800_check_CSCLK) referenced from sim800c.o(.constdata)
 <LI><a href="#[44]">sim800_check_CSQ</a> from sim800c.o(i.sim800_check_CSQ) referenced from sim800c.o(.constdata)
 <LI><a href="#[4d]">sim800_check_CSTT</a> from sim800c.o(i.sim800_check_CSTT) referenced 3 times from sim800c.o(.constdata)
 <LI><a href="#[4e]">sim800_check_ack</a> from sim800c.o(i.sim800_check_ack) referenced 2 times from sim800c.o(.constdata)
 <LI><a href="#[45]">sim800_check_cpin</a> from sim800c.o(i.sim800_check_cpin) referenced from sim800c.o(.constdata)
 <LI><a href="#[41]">sim800_check_reset</a> from sim800c.o(i.sim800_check_reset) referenced from sim800c.o(.constdata)
 <LI><a href="#[50]">sim800_default</a> from sim800c.o(i.sim800_default) referenced from sim800c.o(.constdata)
 <LI><a href="#[51]">sim800_ipopen</a> from sim800c.o(i.sim800_ipopen) referenced from sim800c.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(.text)
</UL>
<P><STRONG><a name="[2c7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[83]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2c8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2c9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2ca]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2cb]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2cc]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2c2]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[26d]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[26f]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>Reserved_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SelfTestFreq_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TBS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht6x3x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[2cd]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreGunStatus
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingProc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingCtrlProc
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechCardBalance
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEmergencyCode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunChargingProc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundNumber
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Uart_Bandrate
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>

<P><STRONG><a name="[2ce]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStartCharging
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendStopChargingAck
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempNotice
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartUpNotice
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingProc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingCtrlProc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTradeInfo
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitChargingCtrlPara
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEmergencyCode
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_Time
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_SignalVal
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_MonthDay
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_ErrCode
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_CardMoney
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayCurrentSocket
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingTime
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundCode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeGunHearBeatInfo
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechPile
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[61]"></a>mktime</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mktime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeStamp
</UL>

<P><STRONG><a name="[2cf]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTempCopy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakeReqProc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerDeviceId
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueDevRegisterACK
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateUpload
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartUpNotice
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceAesReq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueUpLoadHistoryOrder
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueRegister
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSysCfgInfo
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFwInfo
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChargerInfo
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutOut485NetPkt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTradeInfo
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTestPktAck
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardAuthReq
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToCardBlock
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WholeModuleHandle
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBtName
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCkbPcbSn
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock9Handle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardNumReq
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiYaoCardReadIDHandle
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_DownFW
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmdChkNoSpace
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCcidSn
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverInfo
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpgradeInfo
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTradeRecordNotice
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingNotice
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeGunHearBeatInfo
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readVol
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPow
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCur
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmuMatrixInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_PosData
</UL>

<P><STRONG><a name="[214]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[2d0]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[2d2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakeReqProc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuartInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartUpNotice
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceAesReq
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueRegister
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCfgInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSysCfgInfo
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardAuthReq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_DownFW
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputDeviceId
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerSn
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUpdateAesAck
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTradeRecordNotice
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStopChargingAck
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingNotice
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReqCostTemplate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeartBeatFun
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCostTemplateAck
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateUpload
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateReq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceAesReq
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSocketStateCheck
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueUpLoadHistoryOrder
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendHeartBeat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueRegister
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSysCfgInfo
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearKeyBuf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTestPktAck
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePayCardHandle
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKET_open_set
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCheckRes
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsId2GetTimeStampAuthCode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsId2Decrypt
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketSendData
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpgradeInfo
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeStamp
</UL>

<P><STRONG><a name="[2d4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[141]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBcd2str
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsId2Decrypt
</UL>

<P><STRONG><a name="[16a]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WholeModuleHandle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoi
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmdChkNoSpace
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdChkNoSpace
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCheckRes
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocketState
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
</UL>

<P><STRONG><a name="[165]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
</UL>

<P><STRONG><a name="[164]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
</UL>

<P><STRONG><a name="[166]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoi
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmdChkNoSpace
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCcidSn
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
</UL>

<P><STRONG><a name="[9a]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStopCharging
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStartCharging
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WholeModuleHandle
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardIDHandle
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock9Handle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiYaoCardReadIDHandle
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardPayCardReadIDHandle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBlueInfo
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_Standby
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverInfo
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcChargerInfo
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
</UL>

<P><STRONG><a name="[175]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocketState
</UL>

<P><STRONG><a name="[174]"></a>strtok</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocketState
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTempCopy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakeReqProc
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetPullGunTime
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetFullTime
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargeChangePower
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlOpenGun
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlCloseGun
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendStopChargingAck
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendStartChargingAck
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendCostTemplate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueHistoryOrderEnsure
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWUpgradeNotice
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateUpload
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateReq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateDown
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargingSend
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCostTemplate
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreGunStatus
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingProc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingCtrlProc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueUpLoadHistoryOrder
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvAckProc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTradeInfo
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock9Handle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverInfo
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunChargingProc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpgradeInfo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStopTime
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStop
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintfSwitch
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargingTime
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargerFullStop
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTradeRecordNotice
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingNotice
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCloseGun
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoSetChargeChangePower
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
</UL>

<P><STRONG><a name="[2d5]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTempCopy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendStopChargingAck
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendStartChargingAck
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueHistoryOrderEnsure
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateUpload
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateReq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingCtrlProc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueUpLoadHistoryOrder
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTradeInfo
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardAuthReq
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTradeRecordNotice
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingNotice
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
</UL>

<P><STRONG><a name="[2d7]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__0sscanf</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocketState
</UL>

<P><STRONG><a name="[87]"></a>_scanf_string</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[68]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoi
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCheckRes
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matprod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invNxN
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_2_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invNxN
</UL>

<P><STRONG><a name="[290]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readVol
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPow
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCur
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAlldata
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matprod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invNxN
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMatrix
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAlldata
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invNxN
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecHandle
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readVol
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPow
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCur
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readVol
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPow
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCur
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAlldata
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_2_IRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLearnMatrix
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAlldata
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOneGunCharging
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecHandle
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readVol
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPow
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCur
</UL>

<P><STRONG><a name="[28d]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readVol
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPow
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCur
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invNxN
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterValue
</UL>

<P><STRONG><a name="[2d9]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterValue
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invNxN
</UL>

<P><STRONG><a name="[28f]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAlldata
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invNxN
</UL>

<P><STRONG><a name="[2da]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAlldata
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invNxN
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOneGunCharging
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2db]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2dc]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2dd]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>localtime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = localtime &rArr; _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTickToDay
</UL>

<P><STRONG><a name="[62]"></a>_localtime</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[67]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[33]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[2de]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[6c]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[75]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[74]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2df]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[36]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>__vfscanf</STRONG> (Thumb, 812 bytes, Stack size 80 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real (Weak Reference)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int (Weak Reference)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[81]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[88]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[2e0]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>ADC_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tempdetection.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ADC_Init &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TBS_PeriodSet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TBS_ITConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TBS_FilCntConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TBS_ClkSelConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TBS_ADCTriSample
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TBSConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[13f]"></a>AES_decrypt</STRONG> (Thumb, 860 bytes, Stack size 60 bytes, aes.o(i.AES_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AES_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptData
</UL>

<P><STRONG><a name="[10f]"></a>AES_encrypt</STRONG> (Thumb, 954 bytes, Stack size 60 bytes, aes.o(i.AES_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AES_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncrypData
</UL>

<P><STRONG><a name="[91]"></a>AES_set_decrypt_key</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, aes.o(i.AES_set_decrypt_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AES_set_decrypt_key &rArr; AES_set_encrypt_key
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_set_encrypt_key
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
</UL>

<P><STRONG><a name="[92]"></a>AES_set_encrypt_key</STRONG> (Thumb, 734 bytes, Stack size 32 bytes, aes.o(i.AES_set_encrypt_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AES_set_encrypt_key
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_set_decrypt_key
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
</UL>

<P><STRONG><a name="[93]"></a>AesInfoHandle</STRONG> (Thumb, 418 bytes, Stack size 160 bytes, proto.o(i.AesInfoHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = AesInfoHandle &rArr; TfsId2Decrypt &rArr; GprsSendCmdChkNoSpace &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBcd2str
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_set_encrypt_key
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsId2Decrypt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SycTimeCount
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtcCount
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_set_decrypt_key
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[a0]"></a>App_CB_DownFW</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, card.o(i.App_CB_DownFW))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = App_CB_DownFW &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCKBPkt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
</UL>

<P><STRONG><a name="[a5]"></a>App_CB_Handle_UpgradeInfo</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, card.o(i.App_CB_Handle_UpgradeInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_CB_Handle_UpgradeInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCKBData
</UL>

<P><STRONG><a name="[a6]"></a>App_CB_SendStartUpgrade</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, card.o(i.App_CB_SendStartUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = App_CB_SendStartUpgrade &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCKBPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
</UL>

<P><STRONG><a name="[a7]"></a>AttGpioInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, gun.o(i.AttGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AttGpioInit &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunInit
</UL>

<P><STRONG><a name="[a9]"></a>AutoLearnMatrix</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, emu.o(i.AutoLearnMatrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = AutoLearnMatrix &rArr; invNxN &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMatrix
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invNxN
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOneGunCharging
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEmuCalation
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
</UL>

<P><STRONG><a name="[ae]"></a>BlueCostTemplateDown</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, blueproto.o(i.BlueCostTemplateDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = BlueCostTemplateDown &rArr; CostTempCopy &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTempCopy
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[b2]"></a>BlueCostTemplateReq</STRONG> (Thumb, 102 bytes, Stack size 280 bytes, blueproto.o(i.BlueCostTemplateReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = BlueCostTemplateReq &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakeReqProc
</UL>

<P><STRONG><a name="[b4]"></a>BlueCostTemplateUpload</STRONG> (Thumb, 204 bytes, Stack size 280 bytes, blueproto.o(i.BlueCostTemplateUpload))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = BlueCostTemplateUpload &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendCostTemplate
</UL>

<P><STRONG><a name="[b5]"></a>BlueDevRegisterACK</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, blueproto.o(i.BlueDevRegisterACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = BlueDevRegisterACK &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[b9]"></a>BlueFWDownLoad</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, blueproto.o(i.BlueFWDownLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = BlueFWDownLoad &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptSuccessNotice
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[bc]"></a>BlueFWUpgradeNotice</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, blueproto.o(i.BlueFWUpgradeNotice))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = BlueFWUpgradeNotice &rArr; SendFwUpgradeNoticeAck &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFwUpgradeNoticeAck
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[c0]"></a>BlueHistoryOrderEnsure</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, blueproto.o(i.BlueHistoryOrderEnsure))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = BlueHistoryOrderEnsure &rArr; Remove_RecordOrder &rArr; E2promWriteDataEx &rArr; at24c64_eepromWrite &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[c2]"></a>BlueHistoryOrderUpload_ACK</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, blueproto.o(i.BlueHistoryOrderUpload_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BlueHistoryOrderUpload_ACK &rArr; TradeIndex_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TradeIndex_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[c4]"></a>BlueProtoProc</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, blueproto.o(i.BlueProtoProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = BlueProtoProc &rArr; BlueStopCharging &rArr; StopCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakeReqProc
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoCtrlProc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OppoSiteAuthProc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerDeviceId
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStopCharging
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStartCharging
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendCostTemplate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueReqBreak
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueHistoryOrderUpload_ACK
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueHistoryOrderEnsure
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWUpgradeNotice
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWDownLoad
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueDevRegisterACK
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateDown
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvBtData
</UL>

<P><STRONG><a name="[cf]"></a>BlueRegister</STRONG> (Thumb, 102 bytes, Stack size 272 bytes, blueproto.o(i.BlueRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = BlueRegister &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[cb]"></a>BlueReqBreak</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, blueproto.o(i.BlueReqBreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BlueReqBreak &rArr; OpenBluetoothRadio &rArr; OperateMaintain &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenBluetoothRadio
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBlutooth
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[ca]"></a>BlueSendCostTemplate</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, blueproto.o(i.BlueSendCostTemplate))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = BlueSendCostTemplate &rArr; BlueCostTemplateUpload &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateUpload
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[d3]"></a>BlueSendHeartBeat</STRONG> (Thumb, 204 bytes, Stack size 104 bytes, blueproto.o(i.BlueSendHeartBeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BlueSendHeartBeat &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSysOnLine
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetSignal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftChargingTime
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGunStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCpuTemp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakeReqProc
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[d9]"></a>BlueSendStartChargingAck</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, blueproto.o(i.BlueSendStartChargingAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = BlueSendStartChargingAck &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStartCharging
</UL>

<P><STRONG><a name="[da]"></a>BlueSendStopChargingAck</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, blueproto.o(i.BlueSendStopChargingAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BlueSendStopChargingAck &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStopCharging
</UL>

<P><STRONG><a name="[c8]"></a>BlueStartCharging</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, blueproto.o(i.BlueStartCharging))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = BlueStartCharging &rArr; StartCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStartPara
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrderBuffStatus
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendStartChargingAck
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[c9]"></a>BlueStopCharging</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, blueproto.o(i.BlueStopCharging))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = BlueStopCharging &rArr; StopCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendStopChargingAck
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[df]"></a>BlueTimingOpen</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, blueproto.o(i.BlueTimingOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BlueTimingOpen &rArr; OpenBluetoothRadio &rArr; OperateMaintain &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenBluetoothRadio
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[e0]"></a>BlueUpLoadHistoryOrder</STRONG> (Thumb, 380 bytes, Stack size 368 bytes, blueproto.o(i.BlueUpLoadHistoryOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = BlueUpLoadHistoryOrder &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcTradeRecord
</UL>

<P><STRONG><a name="[e1]"></a>BootSetReqInfo</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cpucfg.o(i.BootSetReqInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BootSetReqInfo &rArr; HT_Flash_ByteWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_PageErase
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUpdateInfo
</UL>

<P><STRONG><a name="[e4]"></a>BspInit</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, main.o(i.BspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = BspInit &rArr; ChargerInfoProc &rArr; RecoverInfo &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuartInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042b_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNetInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdEnterInitStu
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HistoryOrder_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInfoProc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemResetFlag
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSysCfgInfo
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[f5]"></a>BtModuleHandle</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, card.o(i.BtModuleHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = BtModuleHandle &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTurnOnLed
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Put
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCKBData
</UL>

<P><STRONG><a name="[f9]"></a>BtRemoCtrlCloseGun</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, blueproto.o(i.BtRemoCtrlCloseGun))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BtRemoCtrlCloseGun &rArr; SendBtRemoCtrlAck &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCloseGunProc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBtRemoCtrlAck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoCtrlProc
</UL>

<P><STRONG><a name="[fc]"></a>BtRemoCtrlOpenGun</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, blueproto.o(i.BtRemoCtrlOpenGun))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BtRemoCtrlOpenGun &rArr; SendBtRemoCtrlAck &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenGunProc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBtRemoCtrlAck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoCtrlProc
</UL>

<P><STRONG><a name="[fe]"></a>BtRemoCtrlPrint</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, blueproto.o(i.BtRemoCtrlPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = BtRemoCtrlPrint &rArr; SetPrintSwitch &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBtRemoCtrlAck
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintSwitch
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoCtrlProc
</UL>

<P><STRONG><a name="[100]"></a>BtRemoCtrlReset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, blueproto.o(i.BtRemoCtrlReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BtRemoCtrlReset &rArr; SendBtRemoCtrlAck &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBtRemoCtrlAck
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoCtrlProc
</UL>

<P><STRONG><a name="[101]"></a>BtSetChargeChangePower</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, blueproto.o(i.BtSetChargeChangePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = BtSetChargeChangePower &rArr; SendBtRemoCtrlAck &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargeChangePowerFuncy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBtRemoCtrlAck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoCtrlProc
</UL>

<P><STRONG><a name="[cd]"></a>BtSetChargerDeviceId</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, blueproto.o(i.BtSetChargerDeviceId))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = BtSetChargerDeviceId &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[cc]"></a>BtSetChargerSn</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, blueproto.o(i.BtSetChargerSn))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = BtSetChargerSn &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGunDataSum
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingGunCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOrderCnt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteGunInfo
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_RecordOrder
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[108]"></a>BtSetFullTime</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, blueproto.o(i.BtSetFullTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = BtSetFullTime &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBtRemoCtrlAck
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoCtrlProc
</UL>

<P><STRONG><a name="[109]"></a>BtSetPullGunTime</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, blueproto.o(i.BtSetPullGunTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = BtSetPullGunTime &rArr; SetPullGunStopTimeFuncy &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStopTimeFuncy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBtRemoCtrlAck
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoCtrlProc
</UL>

<P><STRONG><a name="[10b]"></a>BuleStatusSendProc</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, card.o(i.BuleStatusSendProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = BuleStatusSendProc &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSysOnLine
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WholeModuleHandle
</UL>

<P><STRONG><a name="[10c]"></a>CardModuleHandle</STRONG> (Thumb, 682 bytes, Stack size 280 bytes, card.o(i.CardModuleHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = CardModuleHandle &rArr; WritePayCardHandle &rArr; StartCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIGetState
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_set_encrypt_key
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_encrypt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePayCardHandle
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardInfoReportAck
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardNumReq
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayCardConfirmAddEntranceGuard
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiYaoCardReadIDHandle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCardConfirmAddEntranceGuard
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardCardReadIDHandle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReadIDHandle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCKBData
</UL>

<P><STRONG><a name="[114]"></a>CardReadIDHandle</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, card.o(i.CardReadIDHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = CardReadIDHandle &rArr; ReadAuthCardIDHandle &rArr; SendCardAuthReq &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCostTemplate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardIDHandle
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAuthCardIDHandle
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
</UL>

<P><STRONG><a name="[f0]"></a>ChargerInfoProc</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, server.o(i.ChargerInfoProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ChargerInfoProc &rArr; RecoverInfo &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteRead
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_PageErase
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteWrite
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverInfo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoZeroSum
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[11d]"></a>ChargingCtrlProc</STRONG> (Thumb, 586 bytes, Stack size 88 bytes, server.o(i.ChargingCtrlProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = ChargingCtrlProc &rArr; StopCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGunStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunChargingProc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[11f]"></a>ChargingProc</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, server.o(i.ChargingProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = ChargingProc &rArr; StopCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGunDataSum
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteGunInfo
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[120]"></a>CheckBlueInfo</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, card.o(i.CheckBlueInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CheckBlueInfo &rArr; SetBtName &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBcd2str
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBtName
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
</UL>

<P><STRONG><a name="[122]"></a>CheckBlueUpgrade</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, blueproto.o(i.CheckBlueUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckBlueUpgrade
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
</UL>

<P><STRONG><a name="[117]"></a>CheckCostTemplate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, proto.o(i.CheckCostTemplate))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAuthCardIDHandle
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardCardReadIDHandle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReadIDHandle
</UL>

<P><STRONG><a name="[123]"></a>CheckDialValue</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, outnetproto.o(i.CheckDialValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CheckDialValue &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDialValue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[125]"></a>CheckGunStatu</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gun.o(i.CheckGunStatu))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CheckGunStatu &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGunStatus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStartPara
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
</UL>

<P><STRONG><a name="[126]"></a>CheckModeCmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sim800c.o(i.CheckModeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CheckModeCmd &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_cpin
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_ack
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CSTT
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CSCLK
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CREG
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CIPSHUT
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CIPRXGET
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CIPMUX
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CGATT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CCID
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_ATI
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_ATE
</UL>

<P><STRONG><a name="[db]"></a>CheckOrderBuffStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, history_order.o(i.CheckOrderBuffStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckOrderBuffStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOrderCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStartCharging
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_HistoryOrder
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[127]"></a>CheckOrderInfo</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, history_order.o(i.CheckOrderInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CheckOrderInfo &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOrderCnt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HistoryOrder_Init
</UL>

<P><STRONG><a name="[dc]"></a>CheckStartPara</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, proto.o(i.CheckStartPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CheckStartPara &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGunStatu
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCostMode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStartCharging
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[129]"></a>CheckVoiceChipPower</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sc8042.o(i.CheckVoiceChipPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CheckVoiceChipPower &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[12b]"></a>CkbPowerOff</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, card.o(i.CkbPowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CkbPowerOff &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetKeyBoard
</UL>

<P><STRONG><a name="[12c]"></a>CkbPowerOn</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, card.o(i.CkbPowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CkbPowerOn &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetKeyBoard
</UL>

<P><STRONG><a name="[39]"></a>CkbTask</STRONG> (Thumb, 462 bytes, Stack size 440 bytes, card.o(i.CkbTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = CkbTask &rArr; ProcKBData &rArr; HandleCKBData &rArr; CardModuleHandle &rArr; WritePayCardHandle &rArr; StartCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBlueUpgrade
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteRead
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdStatusCheck
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetKeyBoard
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvBtData
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcKbStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcKBData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBlueInfo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_SendStartUpgrade
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_DownFW
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MainTask)
</UL>
<P><STRONG><a name="[107]"></a>Clear_RecordOrder</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, history_order.o(i.Clear_RecordOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Clear_RecordOrder &rArr; E2promWriteDataEx &rArr; at24c64_eepromWrite &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2promWriteDataEx
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HistoryOrder_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSysCfgInfo
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerSn
</UL>

<P><STRONG><a name="[271]"></a>Close_Hrc</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cmu.o(i.Close_Hrc))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockInit
</UL>

<P><STRONG><a name="[af]"></a>CostTempCopy</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, proto.o(i.CostTempCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = CostTempCopy &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCostTemplate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateDown
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTemplateProc
</UL>

<P><STRONG><a name="[137]"></a>CostTemplateProc</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, proto.o(i.CostTemplateProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = CostTemplateProc &rArr; CostTempCopy &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTempCopy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCostTemplateAck
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[139]"></a>CostTemplateReq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, proto.o(i.CostTemplateReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = CostTemplateReq &rArr; SendReqCostTemplate &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReqCostTemplate
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[13b]"></a>CrtlRelay_OFF</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, relayctrltask.o(i.CrtlRelay_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CrtlRelay_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrlTask
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_4_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>CrtlRelay_ON</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, relayctrltask.o(i.CrtlRelay_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CrtlRelay_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrlTask
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_4_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>DecryptAndCheckServeData</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, proto.o(i.DecryptAndCheckServeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DecryptAndCheckServeData &rArr; DecryptData &rArr; AES_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[13e]"></a>DecryptData</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, aes.o(i.DecryptData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DecryptData &rArr; AES_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptAndCheckServeData
</UL>

<P><STRONG><a name="[26b]"></a>Delay_mSec</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cmu.o(i.Delay_mSec))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchTo_Fpll
</UL>

<P><STRONG><a name="[9f]"></a>DeviceBcd2str</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, server.o(i.DeviceBcd2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DeviceBcd2str &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WholeModuleHandle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBlueInfo
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
</UL>

<P><STRONG><a name="[142]"></a>E2promReadDataEx</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, flash.o(i.E2promReadDataEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = E2promReadDataEx &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c64_eepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HistoryOrder_Init
</UL>

<P><STRONG><a name="[135]"></a>E2promWriteDataEx</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, flash.o(i.E2promWriteDataEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = E2promWriteDataEx &rArr; at24c64_eepromWrite &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c64_eepromWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_RecordOrder
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_HistoryOrder
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder_first
</UL>

<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, simuart.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ITFlagStatusGet
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ClearITPendingBit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ITFlagStatusGet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ClearITPendingBit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[14c]"></a>EXTI5_CallBack</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, relayctrltask.o(i.EXTI5_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI5_CallBack &rArr; StartRelayTimer &rArr; timer4_init &rArr; HT_CMU_ClkCtrl1Config
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRelayTimer
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_IRQHandler
</UL>

<P><STRONG><a name="[17]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, relayctrltask.o(i.EXTI5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI5_IRQHandler &rArr; EXTI5_CallBack &rArr; StartRelayTimer &rArr; timer4_init &rArr; HT_CMU_ClkCtrl1Config
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ITFlagStatusGet
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ClearITPendingBit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ITFlagStatusGet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ClearITPendingBit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_CallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i2c.o(i.EXTI6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ITFlagStatusGet
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ClearITPendingBit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ITFlagStatusGet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, simuart.o(i.EXTI7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ITFlagStatusGet
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIRise_ClearITPendingBit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ITFlagStatusGet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_EXTIFall_ClearITPendingBit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[14e]"></a>EepromWriteData</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, flash.o(i.EepromWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = EepromWriteData &rArr; at24c64_eepromWrite &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c64_eepromWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteGunInfo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWritMatrix
</UL>

<P><STRONG><a name="[14f]"></a>ElecHandle</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, emu.o(i.ElecHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ElecHandle &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
</UL>

<P><STRONG><a name="[151]"></a>EmuMatrixInit</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, emu.o(i.EmuMatrixInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = EmuMatrixInit &rArr; SaveEmuCalation &rArr; FlashWritMatrix &rArr; EepromWriteData &rArr; at24c64_eepromWrite &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadMatrix
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEmuCalation
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
</UL>

<P><STRONG><a name="[154]"></a>EnableZXIE</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, emu.o(i.EnableZXIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = EnableZXIE &rArr; HT7017_Write &rArr; SendData_HT7017 &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
</UL>

<P><STRONG><a name="[157]"></a>EncrypData</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, aes.o(i.EncrypData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EncrypData &rArr; AES_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
</UL>

<P><STRONG><a name="[113]"></a>EntranceGuardCardReadIDHandle</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, card.o(i.EntranceGuardCardReadIDHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = EntranceGuardCardReadIDHandle &rArr; ReadAuthCardIDHandle &rArr; SendCardAuthReq &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCostTemplate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAuthCardIDHandle
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardPayCardReadIDHandle
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
</UL>

<P><STRONG><a name="[158]"></a>EntranceGuardPayCardReadIDHandle</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, card.o(i.EntranceGuardPayCardReadIDHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = EntranceGuardPayCardReadIDHandle &rArr; ReadPayCardBlock8Handle &rArr; WriteToCardBlock &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock9Handle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardNumReq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardCardReadIDHandle
</UL>

<P><STRONG><a name="[18a]"></a>FIFO_S_CountUsed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(i.FIFO_S_CountUsed))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
</UL>

<P><STRONG><a name="[188]"></a>FIFO_S_Flush</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifo.o(i.FIFO_S_Flush))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartFlush
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
</UL>

<P><STRONG><a name="[200]"></a>FIFO_S_Get</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, fifo.o(i.FIFO_S_Get))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTask
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetOneData
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvBtData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcKBData
</UL>

<P><STRONG><a name="[12f]"></a>FIFO_S_Init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fifo.o(i.FIFO_S_Init))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsInit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart9
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart8
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart7
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart6
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart5
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart4
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart3
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart2
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart0
</UL>

<P><STRONG><a name="[f7]"></a>FIFO_S_Put</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fifo.o(i.FIFO_S_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FIFO_S_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtModuleHandle
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuUartRecvByte
</UL>

<P><STRONG><a name="[15b]"></a>FlashEraseAppBackup</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash.o(i.FlashEraseAppBackup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlashEraseAppBackup
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
</UL>

<P><STRONG><a name="[15c]"></a>FlashEraseKeyBoardBackup</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, flash.o(i.FlashEraseKeyBoardBackup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlashEraseKeyBoardBackup
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
</UL>

<P><STRONG><a name="[15d]"></a>FlashReadDataEx</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, flash.o(i.FlashReadDataEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FlashReadDataEx &rArr; HT_Flash_ByteRead
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_t
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_first
</UL>

<P><STRONG><a name="[15e]"></a>FlashReadGunInfo</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, flash.o(i.FlashReadGunInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FlashReadGunInfo &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c64_eepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunInit
</UL>

<P><STRONG><a name="[152]"></a>FlashReadMatrix</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, flash.o(i.FlashReadMatrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FlashReadMatrix &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c64_eepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmuMatrixInit
</UL>

<P><STRONG><a name="[15f]"></a>FlashReadSysInfo</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, flash.o(i.FlashReadSysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FlashReadSysInfo &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c64_eepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSysCfgInfo
</UL>

<P><STRONG><a name="[160]"></a>FlashWritMatrix</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, flash.o(i.FlashWritMatrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FlashWritMatrix &rArr; EepromWriteData &rArr; at24c64_eepromWrite &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEmuCalation
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerSn
</UL>

<P><STRONG><a name="[161]"></a>FlashWriteAppBackup</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, flash.o(i.FlashWriteAppBackup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FlashWriteAppBackup &rArr; HT_Flash_ByteWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Write
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
</UL>

<P><STRONG><a name="[105]"></a>FlashWriteGunInfo</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, flash.o(i.FlashWriteGunInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = FlashWriteGunInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingProc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSysCfgInfo
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerSn
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunChargingProc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[b7]"></a>FlashWriteSysInfo</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, flash.o(i.FlashWriteSysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGunDataSum
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStopTimeFuncy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTempCopy
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetFullTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerDeviceId
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueDevRegisterACK
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintSwitch
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSysCfgInfo
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WholeModuleHandle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiYaoCardReadIDHandle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtModuleHandle
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputDeviceId
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverInfo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcFuseBreak
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunChargingProc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargingTime
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[162]"></a>FtpGet</STRONG> (Thumb, 3162 bytes, Stack size 240 bytes, sim800c.o(i.FtpGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = FtpGet &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptSuccessNotice
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUpdateInfo
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteAppBackup
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseAppBackup
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseKeyBoardBackup
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoi
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetline
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmdChkNoSpace
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPRSBuffer
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpgradeInfo
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_Cfg</STRONG> (Thumb, 34 bytes, Stack size 44 bytes, gpio.o(i.GPIO_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042b_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNetInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunGpioInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttGpioInit
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetKeyBoard
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbPowerOn
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsInit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_All_SegCom_IO_Config
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart6
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart5
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart4
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart3
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart2
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart0
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuartGpioInit
</UL>

<P><STRONG><a name="[149]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDialValue
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_CallBack
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuUartRecvByte
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI7_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>GPIO_ResetBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042b_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVoiceChipPower
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunTurnOff
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetKeyBoard
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbPowerOff
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayOn_direct
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrtlRelay_OFF
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_power_on
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_power_off
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTurnOffLed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_USART_TX_PutVal
</UL>

<P><STRONG><a name="[12d]"></a>GPIO_SetBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042b_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunTurnOn
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTurnOnLed
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbPowerOn
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayOn_direct
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrtlRelay_ON
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_power_on
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuartGpioInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_USART_TX_PutVal
</UL>

<P><STRONG><a name="[16e]"></a>GetCcidSn</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sim800c.o(i.GetCcidSn))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetCcidSn &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCheckRes
</UL>

<P><STRONG><a name="[104]"></a>GetChargingGunCnt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gun.o(i.GetChargingGunCnt))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOneGunCharging
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[16f]"></a>GetChargingTime</STRONG> (Thumb, 584 bytes, Stack size 64 bytes, server.o(i.GetChargingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetChargingTime &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunChargingProc
</UL>

<P><STRONG><a name="[170]"></a>GetCkbPcbSn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, card.o(i.GetCkbPcbSn))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GetCkbPcbSn &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCKBPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
</UL>

<P><STRONG><a name="[128]"></a>GetCostMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, server.o(i.GetCostMode))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStartPara
</UL>

<P><STRONG><a name="[d5]"></a>GetCpuTemp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ntcad.o(i.GetCpuTemp))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendHeartBeat
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempProc
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeartBeatFun
</UL>

<P><STRONG><a name="[9b]"></a>GetCurrentTime</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, rtc.o(i.GetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcTime
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Write
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenGunProc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCloseGunProc
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargeChangePowerFuncy
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptSuccessNotice
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTempCopy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStartPara
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakeReqProc
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetPullGunTime
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetFullTime
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStopCharging
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStartCharging
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueHistoryOrderEnsure
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWUpgradeNotice
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWDownLoad
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueDevRegisterACK
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateDown
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsGetId2
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempNotice
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTask
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCostTemplate
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTask
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042b_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreGunStatus
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_next
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcGunStatus
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSysCfgInfo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HistoryOrder_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatHandle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSocketStateCheck
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVoiceChipPower
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDialValue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingProc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingCtrlProc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueUpLoadHistoryOrder
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemResetFlag
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCfgInit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSysCfgInfo
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTest
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTimeOutProc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutNetPktFuncy
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvAckProc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutOut485NetPkt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutSizeNetCheck
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNetConnetProc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_HistoryOrder
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder_first
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_first
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrderInfo
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunTurnOn
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGunStatu
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAlldata
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableZXIE
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmuMatrixInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLearnMatrix
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePayCardHandle
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WholeModuleHandle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvBtData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardIDHandle
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock9Handle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAuthCardIDHandle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcKbStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcKBData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayCardConfirmAddEntranceGuard
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyModuleHandle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCardConfirmAddEntranceGuard
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCKBData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardPayCardReadIDHandle
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardCardReadIDHandle
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbPowerOff
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBlueInfo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReadIDHandle
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuleStatusSendProc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtModuleHandle
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_DownFW
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayOn_direct
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_FlashCheck
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEmergencyCode
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_Standby
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_RelayTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_EventNoticeTest
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_ipopen
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_reset
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_cpin
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_ack
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CSTT
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CSQ
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CSCLK
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CREG
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CIPSHUT
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CIPRXGET
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CIPMUX
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CIICR
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CGATT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CCID
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_ATI
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_ATE
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_power_on
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_power_off
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKET_open_set
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdChkNoSpace
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCheckRes
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPRSBuffer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCcidSn
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim800cReconnect
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTurnOffLed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverInfo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcFuseBreak
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunChargingProc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingTime
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsId2GetTimeStampAuthCode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsId2Decrypt
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketSendData
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCloseGun
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpgradeInfo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStopTime
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStop
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargingTime
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargerFullStop
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReqCostTemplate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteOpenGun
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCloseGun
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcEventNoticeAck
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcChargerInfo
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGunEmergency
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptAndCheckServeData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c64_eepromWrite
</UL>

<P><STRONG><a name="[124]"></a>GetDialValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, server.o(i.GetDialValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetDialValue
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTask
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDialValue
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
</UL>

<P><STRONG><a name="[16b]"></a>GetGPRSBuffer</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, sim800c.o(i.GetGPRSBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetGPRSBuffer &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetOneData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
</UL>

<P><STRONG><a name="[d7]"></a>GetGunStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, emu.o(i.GetGunStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetGunStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcGunStatus
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingCtrlProc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendHeartBeat
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGunStatu
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeGunHearBeatInfo
</UL>

<P><STRONG><a name="[d6]"></a>GetLeftChargingTime</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, proto.o(i.GetLeftChargingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLeftChargingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendHeartBeat
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeGunHearBeatInfo
</UL>

<P><STRONG><a name="[d4]"></a>GetNetSignal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sim800c.o(i.GetNetSignal))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendHeartBeat
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeartBeatFun
</UL>

<P><STRONG><a name="[11b]"></a>GetNoZeroSum</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, proto.o(i.GetNoZeroSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetNoZeroSum &rArr; GetPktSum
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInfoProc
</UL>

<P><STRONG><a name="[103]"></a>GetOrderCnt</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, history_order.o(i.GetOrderCnt))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrderBuffStatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcTradeRecord
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder_first
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_first
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrderInfo
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[b0]"></a>GetPktSum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, proto.o(i.GetPktSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetPktSum
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGunDataSum
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakeReqProc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFwUpgradeNoticeAck
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBtRemoCtrlAck
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerDeviceId
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendStopChargingAck
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendStartChargingAck
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueHistoryOrderEnsure
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWDownLoad
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateUpload
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateReq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateDown
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHistoryOrder
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreGunStatus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HistoryOrder_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_RecordOrder
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueUpLoadHistoryOrder
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendHeartBeat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueRegister
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutNetPktFuncy
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_HistoryOrder
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder_first
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmuMatrixInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEmuCalation
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTestPktAck
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCKBPkt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock9Handle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoZeroSum
</UL>

<P><STRONG><a name="[bf]"></a>GetRtcCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.GetRtcCount))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakeReqProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBlueUpgrade
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendStopChargingAck
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWUpgradeNotice
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTask
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargingSend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintSwitch
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTask
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreGunStatus
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcNetStatus
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcGunStatus
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcBtHeartBeat
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVoiceChipPower
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingProc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingCtrlProc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueTimingOpen
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcTradeRecord
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTimeOutProc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNetConnetProc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out485NetRecvProc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTurnOnLed
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdStatusCheck
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToUiProc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvBtData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock9Handle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcKbStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcKBData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCKBData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEmergencyCode
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_Standby
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunChargingProc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpgradeInfo
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGunEmergency
</UL>

<P><STRONG><a name="[171]"></a>GetRtcTime</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, rtc.o(i.GetRtcTime))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdStatusCheck
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeStamp
</UL>

<P><STRONG><a name="[173]"></a>GetSocketState</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, sim800c.o(i.GetSocketState))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCheckRes
</UL>

<P><STRONG><a name="[176]"></a>GetTimeStamp</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, rtc.o(i.GetTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GetTimeStamp &rArr; mktime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcTime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[23a]"></a>GetUsartOverFlow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(i.GetUsartOverFlow))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTask
</UL>

<P><STRONG><a name="[177]"></a>GprsCheckRes</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, sim800c.o(i.GprsCheckRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetOneData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSocketState
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCcidSn
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendData
</UL>

<P><STRONG><a name="[178]"></a>GprsCmdChkNoSpace</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, sim800c.o(i.GprsCmdChkNoSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GprsCmdChkNoSpace &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetOneData
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmdChkNoSpace
</UL>

<P><STRONG><a name="[17a]"></a>GprsInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sim800c.o(i.GprsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GprsInit &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTask
</UL>

<P><STRONG><a name="[17b]"></a>GprsReset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sim800c.o(i.GprsReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GprsReset &rArr; gprs_power_on &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_power_on
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_power_off
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_reset
</UL>

<P><STRONG><a name="[163]"></a>GprsSendCmd</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, sim800c.o(i.GprsSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSend
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCheckRes
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSocketStateCheck
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_reset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKET_open_set
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim800cReconnect
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketSendData
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
</UL>

<P><STRONG><a name="[167]"></a>GprsSendCmdChkNoSpace</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, sim800c.o(i.GprsSendCmdChkNoSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GprsSendCmdChkNoSpace &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSend
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdChkNoSpace
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsGetId2
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsId2GetTimeStampAuthCode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsId2Decrypt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
</UL>

<P><STRONG><a name="[17f]"></a>GprsSendData</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sim800c.o(i.GprsSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GprsSendData &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCheckRes
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketSendData
</UL>

<P><STRONG><a name="[180]"></a>GprsSocketStateCheck</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, sim800c.o(i.GprsSocketStateCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = GprsSocketStateCheck &rArr; SOCKET_open_set &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKET_open_set
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[11e]"></a>GunChargingProc</STRONG> (Thumb, 1550 bytes, Stack size 64 bytes, server.o(i.GunChargingProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = GunChargingProc &rArr; ProcFuseBreak &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGunDataSum
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteGunInfo
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritecalparaByGunId
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcFuseBreak
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingTime
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingCtrlProc
</UL>

<P><STRONG><a name="[184]"></a>GunGpioInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gun.o(i.GunGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GunGpioInit &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunInit
</UL>

<P><STRONG><a name="[f1]"></a>GunInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gun.o(i.GunInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GunInit &rArr; TurnOffAllGun &rArr; RelayCtrl &rArr; openRelay_Async &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadGunInfo
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffAllGun
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunGpioInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttGpioInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[186]"></a>GunTurnOff</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gun.o(i.GunTurnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GunTurnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcGunStatus
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCloseGun
</UL>

<P><STRONG><a name="[187]"></a>GunTurnOn</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gun.o(i.GunTurnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GunTurnOn &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreGunStatus
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGunEmergency
</UL>

<P><STRONG><a name="[156]"></a>HT7017_Read</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, emu.o(i.HT7017_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HT7017_Read &rArr; SendData_HT7017 &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetOneData
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Flush
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_CountUsed
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check7017_sum
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData_HT7017
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readVol
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPow
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCur
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCheckSum
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableZXIE
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEMUIF
</UL>

<P><STRONG><a name="[155]"></a>HT7017_Write</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, emu.o(i.HT7017_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HT7017_Write &rArr; SendData_HT7017 &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetOneData
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Flush
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_CountUsed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData_HT7017
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecalpara
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableZXIE
</UL>

<P><STRONG><a name="[194]"></a>HT_CMU_ClkCtrl0Config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cmu.o(i.HT_CMU_ClkCtrl0Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_CMU_ClkCtrl0Config
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[19c]"></a>HT_CMU_ClkCtrl1Config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cmu.o(i.HT_CMU_ClkCtrl1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_CMU_ClkCtrl1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart6
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart5
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart4
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart3
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart2
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart0
</UL>

<P><STRONG><a name="[148]"></a>HT_EXTIFall_ClearITPendingBit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, simuart.o(i.HT_EXTIFall_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI7_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>HT_EXTIFall_ITFlagStatusGet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, simuart.o(i.HT_EXTIFall_ITFlagStatusGet))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI7_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>HT_EXTIRise_ClearITPendingBit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, simuart.o(i.HT_EXTIRise_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI7_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>HT_EXTIRise_ITFlagStatusGet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, simuart.o(i.HT_EXTIRise_ITFlagStatusGet))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI7_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>HT_Flash_ByteRead</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, flash.o(i.HT_Flash_ByteRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HT_Flash_ByteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInfoProc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadDataEx
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_FlashCheck
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcChargerInfo
</UL>

<P><STRONG><a name="[e3]"></a>HT_Flash_ByteWrite</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, flash.o(i.HT_Flash_ByteWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HT_Flash_ByteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInfoProc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootSetReqInfo
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteAppBackup
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_HistoryOrder
</UL>

<P><STRONG><a name="[e2]"></a>HT_Flash_PageErase</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, flash.o(i.HT_Flash_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInfoProc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootSetReqInfo
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseAppBackup
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_HistoryOrder
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseKeyBoardBackup
</UL>

<P><STRONG><a name="[16d]"></a>HT_GPIO_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, gpio.o(i.HT_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
</UL>

<P><STRONG><a name="[8b]"></a>HT_TBSConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tempdetection.o(i.HT_TBSConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_TBSConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[90]"></a>HT_TBS_ADCTriSample</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tempdetection.o(i.HT_TBS_ADCTriSample))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[8d]"></a>HT_TBS_ClkSelConfig</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, tempdetection.o(i.HT_TBS_ClkSelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[8c]"></a>HT_TBS_FilCntConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tempdetection.o(i.HT_TBS_FilCntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[8e]"></a>HT_TBS_ITConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tempdetection.o(i.HT_TBS_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[8f]"></a>HT_TBS_PeriodSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tempdetection.o(i.HT_TBS_PeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[2bb]"></a>HT_TMRExt_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, relayctrltask.o(i.HT_TMRExt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_TMRExt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
</UL>

<P><STRONG><a name="[273]"></a>HT_TMR_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, relayctrltask.o(i.HT_TMR_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_4_IRQHandler
</UL>

<P><STRONG><a name="[274]"></a>HT_TMR_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, relayctrltask.o(i.HT_TMR_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_4_IRQHandler
</UL>

<P><STRONG><a name="[272]"></a>HT_TMR_ITFlagStatusGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, relayctrltask.o(i.HT_TMR_ITFlagStatusGet))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_4_IRQHandler
</UL>

<P><STRONG><a name="[2bc]"></a>HT_TMR_PeriodSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, relayctrltask.o(i.HT_TMR_PeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
</UL>

<P><STRONG><a name="[18c]"></a>HandleCKBData</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, card.o(i.HandleCKBData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = HandleCKBData &rArr; CardModuleHandle &rArr; WritePayCardHandle &rArr; StartCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTurnOnLed
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WholeModuleHandle
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyModuleHandle
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtModuleHandle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_Handle_UpgradeInfo
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcKBData
</UL>

<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cpucfg.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[18f]"></a>HeartBeatHandle</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, proto.o(i.HeartBeatHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = HeartBeatHandle &rArr; SendHeartBeatFun &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSysOnLine
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeartBeatFun
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[f4]"></a>HistoryOrder_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, history_order.o(i.HistoryOrder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = HistoryOrder_Init &rArr; Clear_RecordOrder &rArr; E2promWriteDataEx &rArr; at24c64_eepromWrite &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_RecordOrder
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2promReadDataEx
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrderInfo
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[191]"></a>I2C_ClrSi</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c.o(i.I2C_ClrSi))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[25]"></a>I2C_IRQHandler</STRONG> (Thumb, 524 bytes, Stack size 4 bytes, i2c.o(i.I2C_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_IRQHandler &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClrSi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>I2C_Init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Init &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_ClkCtrl0Config
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[198]"></a>I2C_ReadNByte</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, i2c.o(i.I2C_ReadNByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c64_eepromRead
</UL>

<P><STRONG><a name="[193]"></a>I2C_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c.o(i.I2C_Start))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>I2C_Stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c.o(i.I2C_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>I2C_WriteNByte</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, i2c.o(i.I2C_WriteNByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_WriteNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c64_eepromWrite
</UL>

<P><STRONG><a name="[19a]"></a>IO_USART_TX_PutVal</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, simuart.o(i.IO_USART_TX_PutVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IO_USART_TX_PutVal
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimUartSendByte
</UL>

<P><STRONG><a name="[19b]"></a>InitChargingCtrlPara</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, proto.o(i.InitChargingCtrlPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InitChargingCtrlPara &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreGunStatus
</UL>

<P><STRONG><a name="[0]"></a>Init_Uart0</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usart.o(i.Init_Uart0))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Init_Uart0 &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_ClkCtrl1Config
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Uart_Bandrate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>Init_Uart1</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usart.o(i.Init_Uart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Init_Uart1 &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_ClkCtrl1Config
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Uart_Bandrate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetKeyBoard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>Init_Uart2</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usart.o(i.Init_Uart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Init_Uart2 &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_ClkCtrl1Config
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Uart_Bandrate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>Init_Uart3</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usart.o(i.Init_Uart3))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Init_Uart3 &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_ClkCtrl1Config
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Uart_Bandrate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>Init_Uart4</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usart.o(i.Init_Uart4))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Init_Uart4 &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_ClkCtrl1Config
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Uart_Bandrate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Init_Uart5</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, usart.o(i.Init_Uart5))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Init_Uart5 &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_ClkCtrl1Config
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Uart_Bandrate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Init_Uart6</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usart.o(i.Init_Uart6))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Init_Uart6 &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_ClkCtrl1Config
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Uart_Bandrate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Init_Uart7</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i.Init_Uart7))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Uart7
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Init_Uart8</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i.Init_Uart8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Uart8
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Init_Uart9</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i.Init_Uart9))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Uart9
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>IsOneGunCharging</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, emu.o(i.IsOneGunCharging))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsOneGunCharging
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingGunCnt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLearnMatrix
</UL>

<P><STRONG><a name="[d8]"></a>IsSysOnLine</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, server.o(i.IsSysOnLine))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcNetStatus
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatHandle
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendHeartBeat
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuleStatusSendProc
</UL>

<P><STRONG><a name="[112]"></a>KeyCardConfirmAddEntranceGuard</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, card.o(i.KeyCardConfirmAddEntranceGuard))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = KeyCardConfirmAddEntranceGuard &rArr; ReadCardNumReq &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardNumReq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
</UL>

<P><STRONG><a name="[18e]"></a>KeyModuleHandle</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, card.o(i.KeyModuleHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = KeyModuleHandle &rArr; KeyToUiProc &rArr; UiKeyHandle_InputChargerSn &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTestPktAck
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToUiProc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeyReportAck
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCKBData
</UL>

<P><STRONG><a name="[1a5]"></a>KeyToUiProc</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, ui.o(i.KeyToUiProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = KeyToUiProc &rArr; UiKeyHandle_InputChargerSn &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Standby
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_Standby
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_SetPrintSwitch
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_RelayTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputDeviceId
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerSn
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_EventNoticeTest
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyModuleHandle
</UL>

<P><STRONG><a name="[1b4]"></a>LcdAllOff</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd.o(i.LcdAllOff))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Standby
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_ProductTest
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ShowBalance
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_SetPrintSwitch
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_RelayTest
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PowerOn
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputDeviceId
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputChargerSn
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_EventNoticeTest
</UL>

<P><STRONG><a name="[1d5]"></a>LcdAllOn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd.o(i.LcdAllOn))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTest
</UL>

<P><STRONG><a name="[1b0]"></a>LcdClrData</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, lcd.o(i.LcdClrData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LcdClrData &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LCD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayZero
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTwo
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayThree
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySix
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySeven
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayOne
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNine
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayFour
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayFive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayEight
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiClearKeyVal
</UL>

<P><STRONG><a name="[1b1]"></a>LcdDisplay</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd.o(i.LcdDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LCD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBlutooth
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayYuan
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTab2Edge
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySuccess
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketOccupied
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketNum
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketFault
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayProgressBar4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayProgressBar3
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayProgressBar2
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayProgressBar1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayPoint
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNum
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayInvalid
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayFailure
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayEdge
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayCol
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayClockDial
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChgMethod
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChargeingMoney
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChargeing
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayCardBalance
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClrData
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySingnal
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNoSingnal
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBackStageConnect
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTab3Edge
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTab1Edge
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketIdle
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayRemainingTime
</UL>

<P><STRONG><a name="[1b3]"></a>LcdDisplayAll</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LcdDisplayAll &rArr; LcdDisplayEight &rArr; LcdClrData &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBlutooth
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTurnOnLed
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayYuan
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTab2Edge
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySuccess
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketOccupied
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketNum
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketFault
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayProgressBar4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayProgressBar3
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayProgressBar2
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayProgressBar1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayPoint
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNum
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayInvalid
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayFailure
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayEight
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayEdge
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayCol
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayClockDial
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChgMethod
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChargeingMoney
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChargeing
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayCardBalance
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAllOff
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySingnal
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNoSingnal
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBackStageConnect
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTab3Edge
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTab1Edge
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketIdle
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayRemainingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>

<P><STRONG><a name="[1d1]"></a>LcdDisplayAllEdge</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayAllEdge))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LcdDisplayAllEdge &rArr; LcdDisplayTab2Edge &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTab2Edge
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayEdge
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTab3Edge
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTab1Edge
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ShowBalance
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_StartChargingFailure
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketOccupy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketNumNotExsit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketException
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_InputSocketNum
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_InputChargerMoney
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_StartCharging
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardStartCharging
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardBanlanceInsufficient
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_BanlanceInsufficient
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_VerifyCardFailure
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Charging
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ReadCardSuccess
</UL>

<P><STRONG><a name="[1b5]"></a>LcdDisplayBackStageConnect</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayBackStageConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayBackStageConnect &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTask
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcNetStatus
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_SetPrintSwitch
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_RelayTest
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputDeviceId
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputChargerSn
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_EventNoticeTest
</UL>

<P><STRONG><a name="[d0]"></a>LcdDisplayBlutooth</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayBlutooth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayBlutooth &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakeReqProc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueReqBreak
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcBtHeartBeat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
</UL>

<P><STRONG><a name="[1c4]"></a>LcdDisplayCardBalance</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayCardBalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayCardBalance &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ShowBalance
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardBanlanceInsufficient
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_BanlanceInsufficient
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_VerifyCardFailure
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ReadCardSuccess
</UL>

<P><STRONG><a name="[1bf]"></a>LcdDisplayChargeing</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayChargeing))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayChargeing &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Charging
</UL>

<P><STRONG><a name="[1c6]"></a>LcdDisplayChargeingMoney</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayChargeingMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayChargeingMoney &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_InputChargerMoney
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_StartCharging
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardStartCharging
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardBanlanceInsufficient
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_BanlanceInsufficient
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Charging
</UL>

<P><STRONG><a name="[1b8]"></a>LcdDisplayChgMethod</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayChgMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayChgMethod &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Standby
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PowerOn
</UL>

<P><STRONG><a name="[1ce]"></a>LcdDisplayClockDial</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayClockDial))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayClockDial &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Standby
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
</UL>

<P><STRONG><a name="[1d0]"></a>LcdDisplayCol</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lcd.o(i.LcdDisplayCol))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LcdDisplayCol &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_Time
</UL>

<P><STRONG><a name="[1c7]"></a>LcdDisplayEdge</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayEdge))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayEdge &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_EventNoticeTest
</UL>

<P><STRONG><a name="[5a]"></a>LcdDisplayEight</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, lcd.o(i.LcdDisplayEight))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LcdDisplayEight &rArr; LcdClrData &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClrData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LCD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>LcdDisplayFailure</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayFailure &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_StartChargingFailure
</UL>

<P><STRONG><a name="[57]"></a>LcdDisplayFive</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, lcd.o(i.LcdDisplayFive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LcdDisplayFive &rArr; LcdClrData &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClrData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LCD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>LcdDisplayFour</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayFour))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LcdDisplayFour &rArr; LcdClrData &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClrData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LCD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[1c1]"></a>LcdDisplayInvalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayInvalid &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketNumNotExsit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_VerifyCardFailure
</UL>

<P><STRONG><a name="[5b]"></a>LcdDisplayNine</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, lcd.o(i.LcdDisplayNine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LcdDisplayNine &rArr; LcdClrData &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClrData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LCD_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[1b7]"></a>LcdDisplayNoSingnal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayNoSingnal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayNoSingnal &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Standby
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTask
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PowerOn
</UL>

<P><STRONG><a name="[1cb]"></a>LcdDisplayNum</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayNum &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_StartChargingFailure
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketOccupy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketNumNotExsit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketException
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_InputSocketNum
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_StartCharging
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardStartCharging
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_EventNoticeTest
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Charging
</UL>

<P><STRONG><a name="[53]"></a>LcdDisplayOne</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, lcd.o(i.LcdDisplayOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LcdDisplayOne &rArr; LcdClrData &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClrData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LCD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[1cf]"></a>LcdDisplayPoint</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lcd.o(i.LcdDisplayPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LcdDisplayPoint &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_Version
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_MonthDay
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_CardMoney
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiClearKeyVal
</UL>

<P><STRONG><a name="[1bb]"></a>LcdDisplayProgressBar1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayProgressBar1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayProgressBar1 &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiProgressLoop
</UL>

<P><STRONG><a name="[1bc]"></a>LcdDisplayProgressBar2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayProgressBar2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayProgressBar2 &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiProgressLoop
</UL>

<P><STRONG><a name="[1bd]"></a>LcdDisplayProgressBar3</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayProgressBar3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayProgressBar3 &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiProgressLoop
</UL>

<P><STRONG><a name="[1be]"></a>LcdDisplayProgressBar4</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayProgressBar4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayProgressBar4 &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiProgressLoop
</UL>

<P><STRONG><a name="[1cd]"></a>LcdDisplayRemainingTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayRemainingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayRemainingTime &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
</UL>

<P><STRONG><a name="[59]"></a>LcdDisplaySeven</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, lcd.o(i.LcdDisplaySeven))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LcdDisplaySeven &rArr; LcdClrData &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClrData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LCD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>LcdDisplaySingnal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplaySingnal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplaySingnal &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTask
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_SetPrintSwitch
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_RelayTest
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputDeviceId
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputChargerSn
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_EventNoticeTest
</UL>

<P><STRONG><a name="[58]"></a>LcdDisplaySix</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, lcd.o(i.LcdDisplaySix))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LcdDisplaySix &rArr; LcdClrData &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClrData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LCD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[1c3]"></a>LcdDisplaySocketFault</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplaySocketFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplaySocketFault &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketException
</UL>

<P><STRONG><a name="[1c0]"></a>LcdDisplaySocketIdle</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplaySocketIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplaySocketIdle &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
</UL>

<P><STRONG><a name="[1c5]"></a>LcdDisplaySocketNum</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplaySocketNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplaySocketNum &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_StartChargingFailure
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketOccupy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketNumNotExsit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketException
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_InputSocketNum
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_StartCharging
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardStartCharging
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_EventNoticeTest
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Charging
</UL>

<P><STRONG><a name="[1c2]"></a>LcdDisplaySocketOccupied</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplaySocketOccupied))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplaySocketOccupied &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketOccupy
</UL>

<P><STRONG><a name="[1b9]"></a>LcdDisplaySuccess</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplaySuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplaySuccess &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Charging
</UL>

<P><STRONG><a name="[1c8]"></a>LcdDisplayTab1Edge</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayTab1Edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayTab1Edge &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
</UL>

<P><STRONG><a name="[1c9]"></a>LcdDisplayTab2Edge</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayTab2Edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayTab2Edge &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_EventNoticeTest
</UL>

<P><STRONG><a name="[1ca]"></a>LcdDisplayTab3Edge</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayTab3Edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayTab3Edge &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
</UL>

<P><STRONG><a name="[55]"></a>LcdDisplayThree</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, lcd.o(i.LcdDisplayThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LcdDisplayThree &rArr; LcdClrData &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClrData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LCD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>LcdDisplayTwo</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, lcd.o(i.LcdDisplayTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LcdDisplayTwo &rArr; LcdClrData &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClrData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LCD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>LcdDisplayYuan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LcdDisplayYuan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDisplayYuan &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ShowBalance
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_InputChargerMoney
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_StartCharging
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardStartCharging
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardBanlanceInsufficient
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_BanlanceInsufficient
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_VerifyCardFailure
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Charging
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ReadCardSuccess
</UL>

<P><STRONG><a name="[52]"></a>LcdDisplayZero</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, lcd.o(i.LcdDisplayZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LcdDisplayZero &rArr; LcdClrData &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClrData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LCD_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>LcdEnterInitStu</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(i.LcdEnterInitStu))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LcdEnterInitStu &rArr; SwitchToUi_PowerOn &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTurnOnLed
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PowerOn
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[131]"></a>LcdStatusCheck</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, server.o(i.LcdStatusCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LcdStatusCheck &rArr; LcdTurnOffLed &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTurnOnLed
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTurnOffLed
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcTime
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
</UL>

<P><STRONG><a name="[1d4]"></a>LcdTest</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, producttest.o(i.LcdTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LcdTest &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAllOn
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTurnOnLed
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
</UL>

<P><STRONG><a name="[1d3]"></a>LcdTurnOffLed</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd.o(i.LcdTurnOffLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LcdTurnOffLed &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdStatusCheck
</UL>

<P><STRONG><a name="[f8]"></a>LcdTurnOnLed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd.o(i.LcdTurnOnLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LcdTurnOnLed
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdEnterInitStu
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTest
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdStatusCheck
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCKBData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtModuleHandle
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[eb]"></a>Lcd_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lcd.o(i.Lcd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Lcd_Init &rArr; Lcd_All_SegCom_IO_Config &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAllOn
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_ClkCtrl0Config
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_All_SegCom_IO_Config
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LCD_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[1d8]"></a>LinuxTickToDay</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rtc.o(i.LinuxTickToDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LinuxTickToDay &rArr; localtime &rArr; _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtcCount
</UL>

<P><STRONG><a name="[ef]"></a>LoadSysCfgInfo</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, main.o(i.LoadSysCfgInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = LoadSysCfgInfo &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteGunInfo
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadSysInfo
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_RecordOrder
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCfgInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[3e]"></a>MainTask</STRONG> (Thumb, 1304 bytes, Stack size 16 bytes, main.o(i.MainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = MainTask &rArr; ChargingCtrlProc &rArr; StopCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsGetId2
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Standby
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargingSend
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCostTemplate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintSwitch
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartUpNotice
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHistoryOrder
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceAesReq
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreGunStatus
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcNetStatus
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcGunStatus
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcBtHeartBeat
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatHandle
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSocketStateCheck
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTemplateReq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVoiceChipPower
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDialValue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingProc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingCtrlProc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueTimingOpen
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendHeartBeat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueRegister
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempProc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcTradeRecord
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1e7]"></a>MakeGunHearBeatInfo</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, proto.o(i.MakeGunHearBeatInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MakeGunHearBeatInfo &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftChargingTime
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGunStatus
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeartBeatFun
</UL>

<P><STRONG><a name="[1e8]"></a>MakeTradeInfo</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, history_order.o(i.MakeTradeInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MakeTradeInfo &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
</UL>

<P><STRONG><a name="[111]"></a>MiYaoCardReadIDHandle</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, card.o(i.MiYaoCardReadIDHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = MiYaoCardReadIDHandle &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
</UL>

<P><STRONG><a name="[a4]"></a>MuxSempGive</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, server.o(i.MuxSempGive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartUpNotice
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceAesReq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNetUpgradeProc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_HistoryOrder
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder_first
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_t
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardAuthReq
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToCardBlock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBtName
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeyReportAck
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCkbPcbSn
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardInfoReportAck
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBasicInfoReportAck
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardNumReq
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateMaintain
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCkbPcbSn
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_SendStartUpgrade
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_DownFW
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmdChkNoSpace
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketSendData
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUpdateAesAck
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTradeRecordNotice
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStopChargingAck
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingNotice
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReqCostTemplate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoCtrlAck
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeartBeatFun
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCostTemplateAck
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadNByte
</UL>

<P><STRONG><a name="[a1]"></a>MuxSempTake</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, server.o(i.MuxSempTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MuxSempTake &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartUpNotice
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceAesReq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNetUpgradeProc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_HistoryOrder
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder_first
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_t
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardAuthReq
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToCardBlock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBtName
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeyReportAck
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCkbPcbSn
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardInfoReportAck
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBasicInfoReportAck
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardNumReq
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateMaintain
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCkbPcbSn
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_SendStartUpgrade
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_DownFW
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmdChkNoSpace
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketSendData
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUpdateAesAck
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTradeRecordNotice
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStopChargingAck
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingNotice
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReqCostTemplate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoCtrlAck
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeartBeatFun
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCostTemplateAck
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadNByte
</UL>

<P><STRONG><a name="[d1]"></a>OpenBluetoothRadio</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, card.o(i.OpenBluetoothRadio))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OpenBluetoothRadio &rArr; OperateMaintain &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateMaintain
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueReqBreak
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcBtHeartBeat
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueTimingOpen
</UL>

<P><STRONG><a name="[1ec]"></a>OpenGunEmergency</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, proto.o(i.OpenGunEmergency))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OpenGunEmergency &rArr; GunTurnOn &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunTurnOn
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenGunProc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_RelayTest
</UL>

<P><STRONG><a name="[1ed]"></a>OpenNetDevice</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, server.o(i.OpenNetDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = OpenNetDevice &rArr; Sim800cReconnect &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutSizeNetCheck
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim800cReconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTask
</UL>

<P><STRONG><a name="[14a]"></a>OpenTimer</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, simuart.o(i.OpenTimer))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuUartSendData
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI7_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[1eb]"></a>OperateMaintain</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, card.o(i.OperateMaintain))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OperateMaintain &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCKBPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenBluetoothRadio
</UL>

<P><STRONG><a name="[c7]"></a>OppoSiteAuthProc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, blueproto.o(i.OppoSiteAuthProc))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[f6]"></a>OptFailNotice</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sc8042.o(i.OptFailNotice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_ErrCode
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundCode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTempCopy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStartPara
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsGetId2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceAesReq
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatHandle
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTimeOutProc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAuthCardIDHandle
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardCardReadIDHandle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReadIDHandle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtModuleHandle
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_ipopen
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_reset
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CSQ
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModeCmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingTime
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketSendData
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[bb]"></a>OptSuccessNotice</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sc8042.o(i.OptSuccessNotice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OptSuccessNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundCode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWDownLoad
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[1f2]"></a>Out485NetRecvProc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, outnetproto.o(i.Out485NetRecvProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = Out485NetRecvProc &rArr; PktRecvProc &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNetRecvProc
</UL>

<P><STRONG><a name="[1f4]"></a>OutNetConnetProc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, outnetproto.o(i.OutNetConnetProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OutNetConnetProc &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTask
</UL>

<P><STRONG><a name="[f3]"></a>OutNetInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, outnetproto.o(i.OutNetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OutNetInit &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[1f5]"></a>OutNetRecvProc</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, outnetproto.o(i.OutNetRecvProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = OutNetRecvProc &rArr; TestDataHandle &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out485NetRecvProc
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTask
</UL>

<P><STRONG><a name="[1f7]"></a>OutNetUpgradeProc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, outnetproto.o(i.OutNetUpgradeProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OutNetUpgradeProc &rArr; SendFwInfo &rArr; PutOutNetPkt &rArr; SendOutNetPkt &rArr; SendOutNetPktFuncy &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFwInfo
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[1ee]"></a>OutSizeNetCheck</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, outnetproto.o(i.OutSizeNetCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OutSizeNetCheck &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenNetDevice
</UL>

<P><STRONG><a name="[115]"></a>PayCardConfirmAddEntranceGuard</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, card.o(i.PayCardConfirmAddEntranceGuard))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PayCardConfirmAddEntranceGuard &rArr; ReadCardNumReq &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardNumReq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
</UL>

<P><STRONG><a name="[1f9]"></a>PaymentCardSpeechStartCharge</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ui.o(i.PaymentCardSpeechStartCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PaymentCardSpeechStartCharge &rArr; StartChargeSpeech &rArr; SpeechPile &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargeSpeech
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
</UL>

<P><STRONG><a name="[1f3]"></a>PktRecvProc</STRONG> (Thumb, 630 bytes, Stack size 32 bytes, outnetproto.o(i.PktRecvProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = PktRecvProc &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptSuccessNotice
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUpdateInfo
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_EquipUpgrade
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteAppBackup
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseAppBackup
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvAckProc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Put
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out485NetRecvProc
</UL>

<P><STRONG><a name="[1fd]"></a>PrintSysCfgInfo</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, server.o(i.PrintSysCfgInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PrintSysCfgInfo &rArr; PrintfData &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCfgInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverInfo
</UL>

<P><STRONG><a name="[95]"></a>PrintfData</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, server.o(i.PrintfData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PrintfData &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerDeviceId
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendStopChargingAck
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendStartChargingAck
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueDevRegisterACK
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateUpload
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateReq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateDown
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartUpNotice
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceAesReq
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSysCfgInfo
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendHeartBeat
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFwInfo
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardAuthReq
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WholeModuleHandle
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBtName
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeyReportAck
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCkbPcbSn
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardInfoReportAck
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBasicInfoReportAck
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvBtData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardIDHandle
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock9Handle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardNumReq
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateMaintain
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiYaoCardReadIDHandle
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardPayCardReadIDHandle
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_SendStartUpgrade
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerSn
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUpdateAesAck
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTradeRecordNotice
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStopChargingAck
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingNotice
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReqCostTemplate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoCtrlAck
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeartBeatFun
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCostTemplateAck
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
</UL>

<P><STRONG><a name="[1e5]"></a>ProcBtHeartBeat</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, blueproto.o(i.ProcBtHeartBeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ProcBtHeartBeat &rArr; OpenBluetoothRadio &rArr; OperateMaintain &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenBluetoothRadio
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBlutooth
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[1fe]"></a>ProcChargerInfo</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, proto.o(i.ProcChargerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ProcChargerInfo &rArr; WriteCfgInfo &rArr; GetNoZeroSum &rArr; GetPktSum
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteRead
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[1ff]"></a>ProcEventNoticeAck</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, proto.o(i.ProcEventNoticeAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ProcEventNoticeAck &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[182]"></a>ProcFuseBreak</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, server.o(i.ProcFuseBreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = ProcFuseBreak &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunChargingProc
</UL>

<P><STRONG><a name="[1e4]"></a>ProcGunStatus</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, server.o(i.ProcGunStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ProcGunStatus &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGunStatus
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunTurnOff
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[133]"></a>ProcKBData</STRONG> (Thumb, 746 bytes, Stack size 16 bytes, card.o(i.ProcKBData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = ProcKBData &rArr; HandleCKBData &rArr; CardModuleHandle &rArr; WritePayCardHandle &rArr; StartCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Get
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCKBData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
</UL>

<P><STRONG><a name="[130]"></a>ProcKbStatus</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, card.o(i.ProcKbStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ProcKbStatus &rArr; ResetKeyBoard &rArr; Init_Uart1 &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetKeyBoard
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
</UL>

<P><STRONG><a name="[1e3]"></a>ProcNetStatus</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, server.o(i.ProcNetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ProcNetStatus &rArr; SendStartUpNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSysOnLine
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartUpNotice
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBackStageConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[1e6]"></a>ProcTradeRecord</STRONG> (Thumb, 60 bytes, Stack size 136 bytes, main.o(i.ProcTradeRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ProcTradeRecord &rArr; BlueUpLoadHistoryOrder &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_next
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOrderCnt
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueUpLoadHistoryOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[202]"></a>PutOut485NetPkt</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, outnetproto.o(i.PutOut485NetPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PutOut485NetPkt &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutOutNetPkt
</UL>

<P><STRONG><a name="[203]"></a>PutOutNetPkt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, outnetproto.o(i.PutOutNetPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PutOutNetPkt &rArr; SendOutNetPkt &rArr; SendOutNetPktFuncy &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutNetPkt
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutOut485NetPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFwInfo
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
</UL>

<P><STRONG><a name="[24]"></a>RTC_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtc.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>ReadAuthCardIDHandle</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, card.o(i.ReadAuthCardIDHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ReadAuthCardIDHandle &rArr; SendCardAuthReq &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_ReadingCard
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTestPktAck
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardAuthReq
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCostTemplate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardCardReadIDHandle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReadIDHandle
</UL>

<P><STRONG><a name="[10e]"></a>ReadCardNumReq</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, card.o(i.ReadCardNumReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ReadCardNumReq &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCKBPkt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardIDHandle
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock9Handle
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayCardConfirmAddEntranceGuard
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCardConfirmAddEntranceGuard
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardPayCardReadIDHandle
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
</UL>

<P><STRONG><a name="[207]"></a>ReadCheckSum</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, emu.o(i.ReadCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReadCheckSum &rArr; HT7017_Read &rArr; SendData_HT7017 &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
</UL>

<P><STRONG><a name="[208]"></a>ReadEMUIF</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, relayctrltask.o(i.ReadEMUIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReadEMUIF &rArr; HT7017_Read &rArr; SendData_HT7017 &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrlTask
</UL>

<P><STRONG><a name="[15a]"></a>ReadPayCardBlock8Handle</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, card.o(i.ReadPayCardBlock8Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ReadPayCardBlock8Handle &rArr; WriteToCardBlock &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearKeyBuf
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputSocketNum
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ShowBalance
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechCardBalance
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToCardBlock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardIDHandle
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardPayCardReadIDHandle
</UL>

<P><STRONG><a name="[159]"></a>ReadPayCardBlock9Handle</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, card.o(i.ReadPayCardBlock9Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ReadPayCardBlock9Handle &rArr; ReadCardNumReq &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardNumReq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardIDHandle
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardPayCardReadIDHandle
</UL>

<P><STRONG><a name="[118]"></a>ReadPayCardIDHandle</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, card.o(i.ReadPayCardIDHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ReadPayCardIDHandle &rArr; ReadPayCardBlock8Handle &rArr; WriteToCardBlock &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock9Handle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardNumReq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReadIDHandle
</UL>

<P><STRONG><a name="[20e]"></a>Read_HistoryOrder_first</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, history_order.o(i.Read_HistoryOrder_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Read_HistoryOrder_first &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOrderCnt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadDataEx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHistoryOrder
</UL>

<P><STRONG><a name="[201]"></a>Read_HistoryOrder_next</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, history_order.o(i.Read_HistoryOrder_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Read_HistoryOrder_next &rArr; Read_HistoryOrder_t &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isTradeIndexTrue
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_t
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcTradeRecord
</UL>

<P><STRONG><a name="[210]"></a>Read_HistoryOrder_t</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, history_order.o(i.Read_HistoryOrder_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Read_HistoryOrder_t &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadDataEx
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_next
</UL>

<P><STRONG><a name="[11c]"></a>RecoverInfo</STRONG> (Thumb, 462 bytes, Stack size 16 bytes, server.o(i.RecoverInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = RecoverInfo &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSysCfgInfo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInfoProc
</UL>

<P><STRONG><a name="[1fc]"></a>RecvAckProc</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, outnetproto.o(i.RecvAckProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RecvAckProc &rArr; SendOutNetPkt &rArr; SendOutNetPktFuncy &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReqFwUpdata
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutNetPkt
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChargerInfo
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
</UL>

<P><STRONG><a name="[134]"></a>RecvBtData</STRONG> (Thumb, 458 bytes, Stack size 24 bytes, card.o(i.RecvBtData))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = RecvBtData &rArr; BlueProtoProc &rArr; BlueStopCharging &rArr; StopCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Get
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
</UL>

<P><STRONG><a name="[213]"></a>RecvServerData</STRONG> (Thumb, 3086 bytes, Stack size 56 bytes, proto.o(i.RecvServerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = RecvServerData &rArr; SetUpgradeInfo &rArr; FtpGet &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGunDataSum
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptSuccessNotice
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingGunCnt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStartPara
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrderBuffStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Standby
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOrderCnt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteGunInfo
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNetUpgradeProc
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder_first
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearKeyBuf
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputSocketNum
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechCardBalance
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTurnOnLed
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SycTimeCount
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_VerifyCardFailure
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ReadCardSuccess
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundCode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtcCount
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpgradeInfo
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUpdateAesAck
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStopChargingAck
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReqCostTemplate
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcEventNoticeAck
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcChargerInfo
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptAndCheckServeData
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTemplateProc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTask
</UL>

<P><STRONG><a name="[21d]"></a>RelayCtrl</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, relayctrltask.o(i.RelayCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RelayCtrl &rArr; openRelay_Async &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayOn_direct
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay_Async
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffAllGun
</UL>

<P><STRONG><a name="[3b]"></a>RelayCtrlTask</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, relayctrltask.o(i.RelayCtrlTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RelayCtrlTask &rArr; ReadEMUIF &rArr; HT7017_Read &rArr; SendData_HT7017 &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEMUIF
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrtlRelay_ON
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrtlRelay_OFF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MainTask)
</UL>
<P><STRONG><a name="[ce]"></a>RemoCtrlProc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, blueproto.o(i.RemoCtrlProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = RemoCtrlProc &rArr; BtSetPullGunTime &rArr; SetPullGunStopTimeFuncy &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetPullGunTime
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetFullTime
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargeChangePower
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlReset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlOpenGun
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlCloseGun
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[223]"></a>RemoSetChargeChangePower</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, proto.o(i.RemoSetChargeChangePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = RemoSetChargeChangePower &rArr; SendRemoCtrlAck &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargeChangePowerFuncy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoCtrlAck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
</UL>

<P><STRONG><a name="[225]"></a>RemoteCloseGun</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, proto.o(i.RemoteCloseGun))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = RemoteCloseGun &rArr; SendRemoCtrlAck &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCloseGunProc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoCtrlAck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
</UL>

<P><STRONG><a name="[21b]"></a>RemoteCtrlProc</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, proto.o(i.RemoteCtrlProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = RemoteCtrlProc &rArr; SetPullGunStopTime &rArr; SetPullGunStopTimeFuncy &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStopTime
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStop
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintfSwitch
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargingTime
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargerFullStop
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoCtrlAck
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteOpenGun
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCloseGun
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoSetChargeChangePower
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[226]"></a>RemoteOpenGun</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, proto.o(i.RemoteOpenGun))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = RemoteOpenGun &rArr; SendRemoCtrlAck &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenGunProc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoCtrlAck
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
</UL>

<P><STRONG><a name="[c1]"></a>Remove_RecordOrder</STRONG> (Thumb, 428 bytes, Stack size 296 bytes, history_order.o(i.Remove_RecordOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = Remove_RecordOrder &rArr; E2promWriteDataEx &rArr; at24c64_eepromWrite &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOrderCnt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_PageErase
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteWrite
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadDataEx
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2promWriteDataEx
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_t
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_first
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueHistoryOrderEnsure
</UL>

<P><STRONG><a name="[219]"></a>Remove_RecordOrder_first</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, history_order.o(i.Remove_RecordOrder_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Remove_RecordOrder_first &rArr; E2promWriteDataEx &rArr; at24c64_eepromWrite &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOrderCnt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2promWriteDataEx
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHistoryOrder
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[12e]"></a>ResetKeyBoard</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, card.o(i.ResetKeyBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ResetKeyBoard &rArr; Init_Uart1 &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbPowerOn
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbPowerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcKbStatus
</UL>

<P><STRONG><a name="[b8]"></a>ResetSysTem</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, server.o(i.ResetSysTem))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ResetSysTem &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerDeviceId
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlReset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWDownLoad
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueDevRegisterACK
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTimeOutProc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputDeviceId
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerSn
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpgradeInfo
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[1db]"></a>RestoreGunStatus</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, gun.o(i.RestoreGunStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RestoreGunStatus &rArr; GunTurnOn &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitChargingCtrlPara
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunTurnOn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[ed]"></a>RtcInit</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, rtc.o(i.RtcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = RtcInit &rArr; GetTimeStamp &rArr; mktime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SycTimeCount
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtcCount
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtcCompensate
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeStamp
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[181]"></a>SOCKET_open_set</STRONG> (Thumb, 150 bytes, Stack size 160 bytes, sim800c.o(i.SOCKET_open_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = SOCKET_open_set &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSocketStateCheck
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_ipopen
</UL>

<P><STRONG><a name="[d2]"></a>Sc8042bSpeech</STRONG> (Thumb, 398 bytes, Stack size 32 bytes, sc8042.o(i.Sc8042bSpeech))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptSuccessNotice
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStartPara
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakeReqProc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueReqBreak
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempNotice
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042b_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcBtHeartBeat
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDialValue
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingCtrlProc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechCardBalance
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePayCardHandle
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardIDHandle
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock9Handle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAuthCardIDHandle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiYaoCardReadIDHandle
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyModuleHandle
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardPayCardReadIDHandle
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargeSpeech
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechStartCharge
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaymentCardSpeechStartCharge
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechChargeing
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundCode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpgradeInfo
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechPile
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundNumber
</UL>

<P><STRONG><a name="[f2]"></a>Sc8042b_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sc8042.o(i.Sc8042b_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Sc8042b_Init &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[22f]"></a>SendBasicInfoReportAck</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, card.o(i.SendBasicInfoReportAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendBasicInfoReportAck &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCKBPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WholeModuleHandle
</UL>

<P><STRONG><a name="[b1]"></a>SendBlueNetPkt</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, card.o(i.SendBlueNetPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCKBPkt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakeReqProc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFwUpgradeNoticeAck
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBtRemoCtrlAck
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerDeviceId
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendStopChargingAck
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendStartChargingAck
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueHistoryOrderEnsure
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWDownLoad
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateUpload
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateReq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateDown
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueUpLoadHistoryOrder
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendHeartBeat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueRegister
</UL>

<P><STRONG><a name="[fb]"></a>SendBtRemoCtrlAck</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, blueproto.o(i.SendBtRemoCtrlAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SendBtRemoCtrlAck &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetPullGunTime
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetFullTime
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargeChangePower
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlReset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlOpenGun
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlCloseGun
</UL>

<P><STRONG><a name="[a3]"></a>SendCKBPkt</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, card.o(i.SendCKBPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToCardBlock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBtName
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeyReportAck
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCkbPcbSn
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardInfoReportAck
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBasicInfoReportAck
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardNumReq
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperateMaintain
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCkbPcbSn
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_SendStartUpgrade
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_DownFW
</UL>

<P><STRONG><a name="[206]"></a>SendCardAuthReq</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, proto.o(i.SendCardAuthReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = SendCardAuthReq &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAuthCardIDHandle
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
</UL>

<P><STRONG><a name="[10d]"></a>SendCardInfoReportAck</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, card.o(i.SendCardInfoReportAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendCardInfoReportAck &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCKBPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
</UL>

<P><STRONG><a name="[212]"></a>SendChargerInfo</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, outnetproto.o(i.SendChargerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SendChargerInfo &rArr; SendOutNetPktFuncy &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutNetPktFuncy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvAckProc
</UL>

<P><STRONG><a name="[232]"></a>SendCkbPcbSn</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, card.o(i.SendCkbPcbSn))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendCkbPcbSn &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCKBPkt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
</UL>

<P><STRONG><a name="[138]"></a>SendCostTemplateAck</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, proto.o(i.SendCostTemplateAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = SendCostTemplateAck &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTemplateProc
</UL>

<P><STRONG><a name="[189]"></a>SendData_HT7017</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, emu.o(i.SendData_HT7017))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SendData_HT7017 &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
</UL>

<P><STRONG><a name="[1dd]"></a>SendDeviceAesReq</STRONG> (Thumb, 234 bytes, Stack size 136 bytes, proto.o(i.SendDeviceAesReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = SendDeviceAesReq &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsId2GetTimeStampAuthCode
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSysToken
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[9d]"></a>SendEventNotice</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, proto.o(i.SendEventNotice))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceAesReq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteGunInfo
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingCtrlProc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempProc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuleStatusSendProc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_EventNoticeTest
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcFuseBreak
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
</UL>

<P><STRONG><a name="[1f8]"></a>SendFwInfo</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, outnetproto.o(i.SendFwInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SendFwInfo &rArr; PutOutNetPkt &rArr; SendOutNetPkt &rArr; SendOutNetPktFuncy &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutOutNetPkt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNetUpgradeProc
</UL>

<P><STRONG><a name="[bd]"></a>SendFwUpgradeNoticeAck</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, blueproto.o(i.SendFwUpgradeNoticeAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SendFwUpgradeNoticeAck &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWUpgradeNotice
</UL>

<P><STRONG><a name="[190]"></a>SendHeartBeatFun</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, proto.o(i.SendHeartBeatFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = SendHeartBeatFun &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetSignal
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCpuTemp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeGunHearBeatInfo
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargingSend
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatHandle
</UL>

<P><STRONG><a name="[1e1]"></a>SendHistoryOrder</STRONG> (Thumb, 124 bytes, Stack size 136 bytes, server.o(i.SendHistoryOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = SendHistoryOrder &rArr; SendTradeRecordNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder_first
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_first
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTradeRecordNotice
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[1a3]"></a>SendKeyReportAck</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, card.o(i.SendKeyReportAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendKeyReportAck &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCKBPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyModuleHandle
</UL>

<P><STRONG><a name="[204]"></a>SendOutNetPkt</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, outnetproto.o(i.SendOutNetPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SendOutNetPkt &rArr; SendOutNetPktFuncy &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutNetPktFuncy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvAckProc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutOutNetPkt
</UL>

<P><STRONG><a name="[231]"></a>SendOutNetPktFuncy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, outnetproto.o(i.SendOutNetPktFuncy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SendOutNetPktFuncy &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartFlush
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReqFwUpdata
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutNetPkt
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChargerInfo
</UL>

<P><STRONG><a name="[230]"></a>SendProtoPkt</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, proto.o(i.SendProtoPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutOutNetPkt
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketSendData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncrypData
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartUpNotice
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceAesReq
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardAuthReq
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUpdateAesAck
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTradeRecordNotice
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStopChargingAck
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingNotice
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingAck
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReqCostTemplate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoCtrlAck
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeartBeatFun
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCostTemplateAck
</UL>

<P><STRONG><a name="[1df]"></a>SendRegister</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, proto.o(i.SendRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SendRegister &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[224]"></a>SendRemoCtrlAck</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, proto.o(i.SendRemoCtrlAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = SendRemoCtrlAck &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStopTime
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStop
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintfSwitch
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargingTime
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargerFullStop
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteOpenGun
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCloseGun
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoSetChargeChangePower
</UL>

<P><STRONG><a name="[13a]"></a>SendReqCostTemplate</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, proto.o(i.SendReqCostTemplate))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = SendReqCostTemplate &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTemplateReq
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[211]"></a>SendReqFwUpdata</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, outnetproto.o(i.SendReqFwUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SendReqFwUpdata &rArr; SendOutNetPktFuncy &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutNetPktFuncy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvAckProc
</UL>

<P><STRONG><a name="[217]"></a>SendStartChargingAck</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, proto.o(i.SendStartChargingAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = SendStartChargingAck &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[239]"></a>SendStartChargingNotice</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, proto.o(i.SendStartChargingNotice))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = SendStartChargingNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargingSend
</UL>

<P><STRONG><a name="[1de]"></a>SendStartUpNotice</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, proto.o(i.SendStartUpNotice))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = SendStartUpNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcNetStatus
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[218]"></a>SendStopChargingAck</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, proto.o(i.SendStopChargingAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = SendStopChargingAck &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[1a4]"></a>SendTestPktAck</STRONG> (Thumb, 88 bytes, Stack size 152 bytes, producttest.o(i.SendTestPktAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SendTestPktAck &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSend
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WholeModuleHandle
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAuthCardIDHandle
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyModuleHandle
</UL>

<P><STRONG><a name="[236]"></a>SendTradeRecordNotice</STRONG> (Thumb, 350 bytes, Stack size 96 bytes, proto.o(i.SendTradeRecordNotice))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = SendTradeRecordNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHistoryOrder
</UL>

<P><STRONG><a name="[21c]"></a>SendUpdateAesAck</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, proto.o(i.SendUpdateAesAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = SendUpdateAesAck &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[37]"></a>ServerTask</STRONG> (Thumb, 910 bytes, Stack size 232 bytes, server.o(i.ServerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = ServerTask &rArr; RecvServerData &rArr; SetUpgradeInfo &rArr; FtpGet &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Get
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySingnal
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNoSingnal
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBackStageConnect
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsInit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartOverFlow
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenNetDevice
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SycTimeCount
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MainTask)
</UL>
<P><STRONG><a name="[121]"></a>SetBtName</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, card.o(i.SetBtName))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SetBtName &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCKBPkt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBlueInfo
</UL>

<P><STRONG><a name="[102]"></a>SetChargeChangePowerFuncy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, proto.o(i.SetChargeChangePowerFuncy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetChargeChangePowerFuncy &rArr; WriteCfgInfo &rArr; GetNoZeroSum &rArr; GetPktSum
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargeChangePower
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoSetChargeChangePower
</UL>

<P><STRONG><a name="[22b]"></a>SetChargerFullStop</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, proto.o(i.SetChargerFullStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = SetChargerFullStop &rArr; SendRemoCtrlAck &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoCtrlAck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
</UL>

<P><STRONG><a name="[227]"></a>SetChargingTime</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, proto.o(i.SetChargingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = SetChargingTime &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoCtrlAck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
</UL>

<P><STRONG><a name="[ff]"></a>SetPrintSwitch</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ui.o(i.SetPrintSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = SetPrintSwitch &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlPrint
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_SetPrintSwitch
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintfSwitch
</UL>

<P><STRONG><a name="[22a]"></a>SetPrintfSwitch</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, proto.o(i.SetPrintfSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = SetPrintfSwitch &rArr; SetPrintSwitch &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintSwitch
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoCtrlAck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
</UL>

<P><STRONG><a name="[229]"></a>SetPullGunStop</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, proto.o(i.SetPullGunStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = SetPullGunStop &rArr; SendRemoCtrlAck &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoCtrlAck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
</UL>

<P><STRONG><a name="[228]"></a>SetPullGunStopTime</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, proto.o(i.SetPullGunStopTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = SetPullGunStopTime &rArr; SetPullGunStopTimeFuncy &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStopTimeFuncy
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRemoCtrlAck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
</UL>

<P><STRONG><a name="[10a]"></a>SetPullGunStopTimeFuncy</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, proto.o(i.SetPullGunStopTimeFuncy))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = SetPullGunStopTimeFuncy &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetPullGunTime
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStopTime
</UL>

<P><STRONG><a name="[22d]"></a>SetRtcCompensate</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, rtc.o(i.SetRtcCompensate))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[98]"></a>SetRtcCount</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtc.o(i.SetRtcCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SetRtcCount &rArr; LinuxTickToDay &rArr; localtime &rArr; _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtcTime
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTickToDay
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
</UL>

<P><STRONG><a name="[23b]"></a>SetRtcTime</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rtc.o(i.SetRtcTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetRtcTime
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtcCount
</UL>

<P><STRONG><a name="[21a]"></a>SetUpgradeInfo</STRONG> (Thumb, 232 bytes, Stack size 120 bytes, proto.o(i.SetUpgradeInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = SetUpgradeInfo &rArr; FtpGet &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_EquipUpgrade
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[19e]"></a>Set_Uart_Bandrate</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usart.o(i.Set_Uart_Bandrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Uart_Bandrate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart6
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart5
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart4
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart3
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart2
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart0
</UL>

<P><STRONG><a name="[c6]"></a>ShakeReqProc</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, blueproto.o(i.ShakeReqProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ShakeReqProc &rArr; BlueCostTemplateReq &rArr; SendBlueNetPkt &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBlutooth
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateReq
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueSendHeartBeat
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
</UL>

<P><STRONG><a name="[136]"></a>ShowCostTemplate</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, server.o(i.ShowCostTemplate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ShowCostTemplate &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTempCopy
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[1ef]"></a>Sim800cReconnect</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, sim800c.o(i.Sim800cReconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Sim800cReconnect &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenNetDevice
</UL>

<P><STRONG><a name="[23d]"></a>SimUartSendByte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, simuart.o(i.SimUartSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimUartSendByte &rArr; IO_USART_TX_PutVal
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_USART_TX_PutVal
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_3_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_0_IRQHandler
</UL>

<P><STRONG><a name="[23f]"></a>SimuUartRecvByte</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, simuart.o(i.SimuUartRecvByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SimuUartRecvByte &rArr; FIFO_S_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Put
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_3_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_0_IRQHandler
</UL>

<P><STRONG><a name="[240]"></a>SimuUartSendData</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, simuart.o(i.SimuUartSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSend
</UL>

<P><STRONG><a name="[241]"></a>SimuartGpioInit</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, simuart.o(i.SimuartGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SimuartGpioInit &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuartInit
</UL>

<P><STRONG><a name="[e8]"></a>SimuartInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, simuart.o(i.SimuartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SimuartInit &rArr; SimuartGpioInit &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuartGpioInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[238]"></a>SocketSendData</STRONG> (Thumb, 382 bytes, Stack size 168 bytes, sim800c.o(i.SocketSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
</UL>

<P><STRONG><a name="[1f0]"></a>SoundCode</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sc8042.o(i.SoundCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptSuccessNotice
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[245]"></a>SoundNumber</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, sc8042.o(i.SoundNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SoundNumber &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechCardBalance
</UL>

<P><STRONG><a name="[20b]"></a>SpeechCardBalance</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sc8042.o(i.SpeechCardBalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SpeechCardBalance &rArr; SoundNumber &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundNumber
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[246]"></a>SpeechChargeing</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sc8042.o(i.SpeechChargeing))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SpeechChargeing &rArr; SpeechPile &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechPile
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
</UL>

<P><STRONG><a name="[247]"></a>SpeechPile</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sc8042.o(i.SpeechPile))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SpeechPile &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargeSpeech
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechChargeing
</UL>

<P><STRONG><a name="[248]"></a>SpeechStartCharge</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sc8042.o(i.SpeechStartCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpeechStartCharge &rArr; StartChargeSpeech &rArr; SpeechPile &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargeSpeech
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
</UL>

<P><STRONG><a name="[1fa]"></a>StartChargeSpeech</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, sc8042.o(i.StartChargeSpeech))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = StartChargeSpeech &rArr; SpeechPile &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechPile
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechStartCharge
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaymentCardSpeechStartCharge
</UL>

<P><STRONG><a name="[dd]"></a>StartCharging</STRONG> (Thumb, 586 bytes, Stack size 96 bytes, proto.o(i.StartCharging))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = StartCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGunDataSum
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGunStatus
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteGunInfo
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitChargingCtrlPara
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunTurnOn
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Charging
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechChargeing
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStartCharging
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePayCardHandle
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[1e0]"></a>StartChargingSend</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, server.o(i.StartChargingSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = StartChargingSend &rArr; SendStartChargingNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargingNotice
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeartBeatFun
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[14d]"></a>StartRelayTimer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, relayctrltask.o(i.StartRelayTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StartRelayTimer &rArr; timer4_init &rArr; HT_CMU_ClkCtrl1Config
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_CallBack
</UL>

<P><STRONG><a name="[de]"></a>StopCharging</STRONG> (Thumb, 302 bytes, Stack size 184 bytes, proto.o(i.StopCharging))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = StopCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGunDataSum
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteGunInfo
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_HistoryOrder
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTradeInfo
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunTurnOff
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStopCharging
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingProc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingCtrlProc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[24c]"></a>StrToHex</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, server.o(i.StrToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StrToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Val
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputDeviceId
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerSn
</UL>

<P><STRONG><a name="[215]"></a>SwitchToUI_ReadCardSuccess</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ui.o(i.SwitchToUI_ReadCardSuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUI_ReadCardSuccess &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayYuan
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayCardBalance
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_CardMoney
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[20a]"></a>SwitchToUI_ShowBalance</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ui.o(i.SwitchToUI_ShowBalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUI_ShowBalance &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayYuan
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayCardBalance
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAllOff
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_CardMoney
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
</UL>

<P><STRONG><a name="[1e9]"></a>SwitchToUi_AdministratorTestMode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ui.o(i.SwitchToUi_AdministratorTestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SwitchToUi_AdministratorTestMode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetSignal
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDialValue
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAllOff
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_Version
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_SignalVal
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_PosData
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySingnal
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNoSingnal
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBackStageConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiYaoCardReadIDHandle
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_Standby
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_SetPrintSwitch
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_RelayTest
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputDeviceId
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerSn
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_EventNoticeTest
</UL>

<P><STRONG><a name="[254]"></a>SwitchToUi_BanlanceInsufficient</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_BanlanceInsufficient))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_BanlanceInsufficient &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayYuan
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChargeingMoney
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayCardBalance
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_CardMoney
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
</UL>

<P><STRONG><a name="[249]"></a>SwitchToUi_Charging</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_Charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_Charging &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayYuan
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySuccess
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketNum
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNum
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChargeingMoney
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChargeing
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_CardMoney
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayCurrentSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
</UL>

<P><STRONG><a name="[1fb]"></a>SwitchToUi_EquipUpgrade</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_EquipUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_EquipUpgrade &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpgradeInfo
</UL>

<P><STRONG><a name="[256]"></a>SwitchToUi_EventNoticeTest</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_EventNoticeTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_EventNoticeTest &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTab2Edge
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketNum
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNum
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayEdge
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAllOff
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySingnal
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBackStageConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>

<P><STRONG><a name="[257]"></a>SwitchToUi_InputChargerMoney</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_InputChargerMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_InputChargerMoney &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_InputChargerMoney
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
</UL>

<P><STRONG><a name="[259]"></a>SwitchToUi_InputChargerSn</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ui.o(i.SwitchToUi_InputChargerSn))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SwitchToUi_InputChargerSn &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAllOff
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_PosData
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySingnal
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBackStageConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>

<P><STRONG><a name="[25a]"></a>SwitchToUi_InputDeviceId</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_InputDeviceId))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_InputDeviceId &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAllOff
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySingnal
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBackStageConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>

<P><STRONG><a name="[20c]"></a>SwitchToUi_InputSocketNum</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_InputSocketNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_InputSocketNum &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_InputSocketNum
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[25c]"></a>SwitchToUi_PaymentCardBanlanceInsufficient</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_PaymentCardBanlanceInsufficient))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_PaymentCardBanlanceInsufficient &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayYuan
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChargeingMoney
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayCardBalance
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_CardMoney
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
</UL>

<P><STRONG><a name="[25d]"></a>SwitchToUi_PaymentCardStartCharging</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_PaymentCardStartCharging))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_PaymentCardStartCharging &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayYuan
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketNum
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNum
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChargeingMoney
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_CardMoney
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayCurrentSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
</UL>

<P><STRONG><a name="[1d2]"></a>SwitchToUi_PowerOn</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_PowerOn &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChgMethod
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAllOff
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNoSingnal
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdEnterInitStu
</UL>

<P><STRONG><a name="[25e]"></a>SwitchToUi_ProductTest</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_ProductTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_ProductTest &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAllOff
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
</UL>

<P><STRONG><a name="[205]"></a>SwitchToUi_ReadingCard</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_ReadingCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_ReadingCard &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAuthCardIDHandle
</UL>

<P><STRONG><a name="[25f]"></a>SwitchToUi_RelayTest</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_RelayTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_RelayTest &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAllOff
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySingnal
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBackStageConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>

<P><STRONG><a name="[260]"></a>SwitchToUi_SetPrintSwitch</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_SetPrintSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_SetPrintSwitch &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAllOff
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySingnal
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBackStageConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
</UL>

<P><STRONG><a name="[261]"></a>SwitchToUi_SocketException</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_SocketException))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_SocketException &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketException
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
</UL>

<P><STRONG><a name="[263]"></a>SwitchToUi_SocketNumNotExsit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_SocketNumNotExsit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_SocketNumNotExsit &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketNumNotExsit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
</UL>

<P><STRONG><a name="[265]"></a>SwitchToUi_SocketOccupy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_SocketOccupy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_SocketOccupy &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketOccupy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
</UL>

<P><STRONG><a name="[1af]"></a>SwitchToUi_Standby</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_Standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_Standby &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayClockDial
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChgMethod
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAllOff
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNoSingnal
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToUiProc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[267]"></a>SwitchToUi_StartCharging</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_StartCharging))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_StartCharging &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayYuan
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketNum
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNum
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChargeingMoney
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_CardMoney
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayCurrentSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
</UL>

<P><STRONG><a name="[268]"></a>SwitchToUi_StartChargingFailure</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_StartChargingFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_StartChargingFailure &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_StartChargingFailure
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
</UL>

<P><STRONG><a name="[216]"></a>SwitchToUi_VerifyCardFailure</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ui.o(i.SwitchToUi_VerifyCardFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SwitchToUi_VerifyCardFailure &rArr; UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayYuan
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayInvalid
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayCardBalance
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_CardMoney
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[26a]"></a>SwitchTo_Fpll</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, cmu.o(i.SwitchTo_Fpll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SwitchTo_Fpll
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_mSec
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockInit
</UL>

<P><STRONG><a name="[97]"></a>SycTimeCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, server.o(i.SycTimeCount))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTask
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
</UL>

<P><STRONG><a name="[1d9]"></a>SysCfgInit</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, main.o(i.SysCfgInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SysCfgInit &rArr; PrintSysCfgInfo &rArr; PrintfData &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSysCfgInfo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSysCfgInfo
</UL>

<P><STRONG><a name="[38]"></a>SysTask</STRONG> (Thumb, 540 bytes, Stack size 32 bytes, outnetproto.o(i.SysTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = SysTask &rArr; OutNetRecvProc &rArr; TestDataHandle &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDialValue
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTimeOutProc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNetRecvProc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNetConnetProc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetOneData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MainTask)
</UL>
<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>SysTick_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, systick.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[e5]"></a>SystemClockInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.SystemClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemClockInit &rArr; SwitchTo_Fpll
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchTo_Fpll
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_Hrc
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_ht6xxx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(.text)
</UL>
<P><STRONG><a name="[ea]"></a>SystemResetFlag</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, main.o(i.SystemResetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemResetFlag &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[275]"></a>TIM4_5_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, relayctrltask.o(i.TIM4_5_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_4_IRQHandler
</UL>

<P><STRONG><a name="[1f]"></a>TIMER_0_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, simuart.o(i.TIMER_0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER_0_IRQHandler &rArr; SimUartSendByte &rArr; IO_USART_TX_PutVal
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuUartRecvByte
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimUartSendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER_1_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, simuart.o(i.TIMER_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER_1_IRQHandler &rArr; SimUartSendByte &rArr; IO_USART_TX_PutVal
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuUartRecvByte
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimUartSendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIMER_2_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, emu.o(i.TIMER_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIMER_2_IRQHandler &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER_3_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, simuart.o(i.TIMER_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER_3_IRQHandler &rArr; SimUartSendByte &rArr; IO_USART_TX_PutVal
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuUartRecvByte
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimUartSendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER_4_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, relayctrltask.o(i.TIMER_4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_4_IRQHandler &rArr; CrtlRelay_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_5_Cmd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TMR_ITFlagStatusGet
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TMR_ITConfig
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TMR_ClearITPendingBit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrtlRelay_ON
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrtlRelay_OFF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[14b]"></a>TIM_Cmd</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, simuart.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_3_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_0_IRQHandler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuUartSendData
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuUartRecvByte
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI7_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[276]"></a>TempNotice</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, sc8042.o(i.TempNotice))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TempNotice &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempProc
</UL>

<P><STRONG><a name="[1e2]"></a>TempProc</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, main.o(i.TempProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = TempProc &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempNotice
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCpuTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[277]"></a>TestCloseGun</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, proto.o(i.TestCloseGun))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TestCloseGun &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunTurnOff
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCloseGunProc
</UL>

<P><STRONG><a name="[fa]"></a>TestCloseGunProc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, proto.o(i.TestCloseGunProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TestCloseGunProc &rArr; TestCloseGun &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCloseGun
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlCloseGun
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCloseGun
</UL>

<P><STRONG><a name="[1f6]"></a>TestDataHandle</STRONG> (Thumb, 996 bytes, Stack size 88 bytes, producttest.o(i.TestDataHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = TestDataHandle &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGunDataSum
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetSignal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintSwitch
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteGunInfo
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_RecordOrder
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_ProductTest
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTest
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunTurnOn
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunTurnOff
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTestPktAck
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCkbPcbSn
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCkbPcbSn
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNetRecvProc
</UL>

<P><STRONG><a name="[fd]"></a>TestOpenGunProc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, proto.o(i.TestOpenGunProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TestOpenGunProc &rArr; OpenGunEmergency &rArr; GunTurnOn &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGunEmergency
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtRemoCtrlOpenGun
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_Standby
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_RelayTest
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteOpenGun
</UL>

<P><STRONG><a name="[1dc]"></a>TfsGetId2</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tfs.o(i.TfsGetId2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TfsGetId2 &rArr; GprsSendCmdChkNoSpace &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmdChkNoSpace
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[99]"></a>TfsId2Decrypt</STRONG> (Thumb, 172 bytes, Stack size 544 bytes, tfs.o(i.TfsId2Decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = TfsId2Decrypt &rArr; GprsSendCmdChkNoSpace &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmdChkNoSpace
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
</UL>

<P><STRONG><a name="[234]"></a>TfsId2GetTimeStampAuthCode</STRONG> (Thumb, 152 bytes, Stack size 312 bytes, tfs.o(i.TfsId2GetTimeStampAuthCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = TfsId2GetTimeStampAuthCode &rArr; GprsSendCmdChkNoSpace &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmdChkNoSpace
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceAesReq
</UL>

<P><STRONG><a name="[c3]"></a>TradeIndex_Add</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, history_order.o(i.TradeIndex_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TradeIndex_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TradeIndex_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueHistoryOrderUpload_ACK
</UL>

<P><STRONG><a name="[278]"></a>TradeIndex_Clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, history_order.o(i.TradeIndex_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TradeIndex_Add
</UL>

<P><STRONG><a name="[185]"></a>TurnOffAllGun</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gun.o(i.TurnOffAllGun))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TurnOffAllGun &rArr; RelayCtrl &rArr; openRelay_Async &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunInit
</UL>

<P><STRONG><a name="[19]"></a>UART0_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_IRQHandler &rArr; FIFO_S_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART1_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_IRQHandler &rArr; FIFO_S_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART2_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_IRQHandler &rArr; FIFO_S_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART3_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usart.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART3_IRQHandler &rArr; FIFO_S_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART4_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4_IRQHandler &rArr; FIFO_S_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UART5_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART5_IRQHandler &rArr; FIFO_S_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART6_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usart.o(i.UART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART6_IRQHandler &rArr; FIFO_S_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht6x3x.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>UIGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ui.o(i.UIGetState))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
</UL>

<P><STRONG><a name="[279]"></a>UartSendData</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usart.o(i.UartSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSend
</UL>

<P><STRONG><a name="[27a]"></a>UiClearKeyVal</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ui.o(i.UiClearKeyVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UiClearKeyVal &rArr; LcdDisplayPoint &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayPoint
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClrData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_RelayTest
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_EventNoticeTest
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_Version
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_SocketNum
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_KeyBuf
</UL>

<P><STRONG><a name="[255]"></a>UiDisplayCurrentSocket</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ui.o(i.UiDisplayCurrentSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UiDisplayCurrentSocket &rArr; UiDisplay_PosData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_PosData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_StartChargingFailure
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketOccupy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketNumNotExsit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketException
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_StartCharging
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardStartCharging
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Charging
</UL>

<P><STRONG><a name="[24e]"></a>UiDisplayNomalInfo</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ui.o(i.UiDisplayNomalInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UiDisplayNomalInfo &rArr; LcdDisplayClockDial &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayClockDial
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAllOff
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySingnal
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNoSingnal
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayBackStageConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Standby
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_EquipUpgrade
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_ReadingCard
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ShowBalance
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_StartChargingFailure
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketOccupy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketNumNotExsit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_SocketException
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_InputSocketNum
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ui_InputChargerMoney
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_StartCharging
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardStartCharging
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardBanlanceInsufficient
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_BanlanceInsufficient
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_VerifyCardFailure
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Charging
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ReadCardSuccess
</UL>

<P><STRONG><a name="[24f]"></a>UiDisplay_CardMoney</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, ui.o(i.UiDisplay_CardMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UiDisplay_CardMoney &rArr; UiDisplay_PosData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayPoint
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_PosData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ShowBalance
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_StartCharging
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardStartCharging
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardBanlanceInsufficient
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_BanlanceInsufficient
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_VerifyCardFailure
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Charging
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ReadCardSuccess
</UL>

<P><STRONG><a name="[1f1]"></a>UiDisplay_ErrCode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ui.o(i.UiDisplay_ErrCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UiDisplay_ErrCode &rArr; UiDisplay_PosData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_PosData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
</UL>

<P><STRONG><a name="[27b]"></a>UiDisplay_KeyBuf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ui.o(i.UiDisplay_KeyBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UiDisplay_KeyBuf &rArr; UiDisplay_PosData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_PosData
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiClearKeyVal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_Standby
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_SetPrintSwitch
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_RelayTest
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputDeviceId
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerSn
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_EventNoticeTest
</UL>

<P><STRONG><a name="[27c]"></a>UiDisplay_MonthDay</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ui.o(i.UiDisplay_MonthDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UiDisplay_MonthDay &rArr; UiDisplay_PosData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayPoint
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_PosData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
</UL>

<P><STRONG><a name="[252]"></a>UiDisplay_PosData</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, ui.o(i.UiDisplay_PosData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UiDisplay_PosData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_Version
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_Time
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_SocketNum
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_SignalVal
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_MonthDay
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_KeyBuf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_ErrCode
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_CardMoney
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayCurrentSocket
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputChargerSn
</UL>

<P><STRONG><a name="[253]"></a>UiDisplay_SignalVal</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ui.o(i.UiDisplay_SignalVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UiDisplay_SignalVal &rArr; UiDisplay_PosData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_PosData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
</UL>

<P><STRONG><a name="[27d]"></a>UiDisplay_SocketNum</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ui.o(i.UiDisplay_SocketNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UiDisplay_SocketNum &rArr; UiDisplay_PosData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_PosData
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiClearKeyVal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
</UL>

<P><STRONG><a name="[27e]"></a>UiDisplay_Time</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ui.o(i.UiDisplay_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UiDisplay_Time &rArr; UiDisplay_PosData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayCol
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_PosData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
</UL>

<P><STRONG><a name="[251]"></a>UiDisplay_Version</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ui.o(i.UiDisplay_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UiDisplay_Version &rArr; UiDisplay_PosData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayPoint
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_PosData
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiClearKeyVal
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
</UL>

<P><STRONG><a name="[1a9]"></a>UiKeyHandle_AdministratorTestMode</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, ui.o(i.UiKeyHandle_AdministratorTestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UiKeyHandle_AdministratorTestMode &rArr; LcdDisplayAll &rArr; LcdDisplayEight &rArr; LcdClrData &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Standby
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearKeyBuf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTwo
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayThree
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySix
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySeven
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayOne
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayFour
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayFive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayEight
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAll
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiClearKeyVal
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_SetPrintSwitch
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_RelayTest
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputDeviceId
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputChargerSn
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_EventNoticeTest
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToUiProc
</UL>

<P><STRONG><a name="[1ae]"></a>UiKeyHandle_EventNoticeTest</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, ui.o(i.UiKeyHandle_EventNoticeTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = UiKeyHandle_EventNoticeTest &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearKeyBuf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putCharToKeyBuf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delCharFormKeyBuf
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_KeyBuf
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiClearKeyVal
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToUiProc
</UL>

<P><STRONG><a name="[1a8]"></a>UiKeyHandle_InputChargerMoney</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, ui.o(i.UiKeyHandle_InputChargerMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = UiKeyHandle_InputChargerMoney &rArr; SendCardAuthReq &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearKeyBuf
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputSocketNum
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardAuthReq
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechStartCharge
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putCharToKeyBuf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delCharFormKeyBuf
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_PosData
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_StartCharging
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardStartCharging
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardBanlanceInsufficient
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_BanlanceInsufficient
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaymentCardSpeechStartCharge
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToUiProc
</UL>

<P><STRONG><a name="[1aa]"></a>UiKeyHandle_InputChargerSn</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, ui.o(i.UiKeyHandle_InputChargerSn))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = UiKeyHandle_InputChargerSn &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGunDataSum
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteGunInfo
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_RecordOrder
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWritMatrix
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putCharToKeyBuf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delCharFormKeyBuf
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_KeyBuf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToUiProc
</UL>

<P><STRONG><a name="[1ab]"></a>UiKeyHandle_InputDeviceId</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, ui.o(i.UiKeyHandle_InputDeviceId))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = UiKeyHandle_InputDeviceId &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putCharToKeyBuf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delCharFormKeyBuf
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_KeyBuf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToUiProc
</UL>

<P><STRONG><a name="[1a7]"></a>UiKeyHandle_InputSocketNum</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, ui.o(i.UiKeyHandle_InputSocketNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = UiKeyHandle_InputSocketNum &rArr; SendCardAuthReq &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Standby
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGunStatu
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearKeyBuf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardAuthReq
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putCharToKeyBuf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delCharFormKeyBuf
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_SocketNum
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_SocketOccupy
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_SocketNumNotExsit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_SocketException
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputChargerMoney
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToUiProc
</UL>

<P><STRONG><a name="[1ad]"></a>UiKeyHandle_RelayTest</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, ui.o(i.UiKeyHandle_RelayTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UiKeyHandle_RelayTest &rArr; TestOpenGunProc &rArr; OpenGunEmergency &rArr; GunTurnOn &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenGunProc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearKeyBuf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putCharToKeyBuf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delCharFormKeyBuf
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_KeyBuf
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiClearKeyVal
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGunEmergency
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToUiProc
</UL>

<P><STRONG><a name="[1ac]"></a>UiKeyHandle_SetPrintSwitch</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ui.o(i.UiKeyHandle_SetPrintSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = UiKeyHandle_SetPrintSwitch &rArr; SetPrintSwitch &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintSwitch
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putCharToKeyBuf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delCharFormKeyBuf
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_KeyBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToUiProc
</UL>

<P><STRONG><a name="[1a6]"></a>UiKeyHandle_Standby</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ui.o(i.UiKeyHandle_Standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UiKeyHandle_Standby &rArr; TestOpenGunProc &rArr; OpenGunEmergency &rArr; GunTurnOn &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenGunProc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearKeyBuf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putCharToKeyBuf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEmergencyCode
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delCharFormKeyBuf
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_KeyBuf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToUiProc
</UL>

<P><STRONG><a name="[282]"></a>UiProgressLoop</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, ui.o(i.UiProgressLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UiProgressLoop &rArr; LcdDisplayProgressBar4 &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayProgressBar4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayProgressBar3
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayProgressBar2
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayProgressBar1
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
</UL>

<P><STRONG><a name="[132]"></a>UiStateLoop</STRONG> (Thumb, 766 bytes, Stack size 24 bytes, ui.o(i.UiStateLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UiStateLoop &rArr; SwitchToUi_AdministratorTestMode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Standby
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearKeyBuf
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputSocketNum
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiProgressLoop
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_Time
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplay_MonthDay
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_StartChargingFailure
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_StartCharging
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardStartCharging
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardBanlanceInsufficient
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputChargerMoney
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_BanlanceInsufficient
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcTime
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Charging
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
</UL>

<P><STRONG><a name="[258]"></a>Ui_InputChargerMoney</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ui.o(i.Ui_InputChargerMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ui_InputChargerMoney &rArr; LcdDisplayAllEdge &rArr; LcdDisplayTab2Edge &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayYuan
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayChargeingMoney
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputChargerMoney
</UL>

<P><STRONG><a name="[25b]"></a>Ui_InputSocketNum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ui.o(i.Ui_InputSocketNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ui_InputSocketNum &rArr; LcdDisplayAllEdge &rArr; LcdDisplayTab2Edge &rArr; LcdDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketNum
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNum
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputSocketNum
</UL>

<P><STRONG><a name="[262]"></a>Ui_SocketException</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ui.o(i.Ui_SocketException))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Ui_SocketException &rArr; UiDisplayCurrentSocket &rArr; UiDisplay_PosData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketNum
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketFault
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNum
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayCurrentSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_SocketException
</UL>

<P><STRONG><a name="[264]"></a>Ui_SocketNumNotExsit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ui.o(i.Ui_SocketNumNotExsit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Ui_SocketNumNotExsit &rArr; UiDisplayCurrentSocket &rArr; UiDisplay_PosData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketNum
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNum
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayInvalid
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayCurrentSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_SocketNumNotExsit
</UL>

<P><STRONG><a name="[266]"></a>Ui_SocketOccupy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ui.o(i.Ui_SocketOccupy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Ui_SocketOccupy &rArr; UiDisplayCurrentSocket &rArr; UiDisplay_PosData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketOccupied
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketNum
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNum
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayCurrentSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_SocketOccupy
</UL>

<P><STRONG><a name="[269]"></a>Ui_StartChargingFailure</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ui.o(i.Ui_StartChargingFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Ui_StartChargingFailure &rArr; UiDisplayCurrentSocket &rArr; UiDisplay_PosData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySocketNum
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNum
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayFailure
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayAllEdge
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayNomalInfo
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiDisplayCurrentSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_StartChargingFailure
</UL>

<P><STRONG><a name="[106]"></a>UpdataGunDataSum</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, server.o(i.UpdataGunDataSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingProc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerSn
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunChargingProc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[250]"></a>UpdateNewUiState</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ui.o(i.UpdateNewUiState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UpdateNewUiState &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Standby
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_ProductTest
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_EquipUpgrade
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_ReadingCard
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputSocketNum
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_AdministratorTestMode
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ShowBalance
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_StartChargingFailure
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_StartCharging
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_SocketOccupy
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_SocketNumNotExsit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_SocketException
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_SetPrintSwitch
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_RelayTest
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PowerOn
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardStartCharging
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_PaymentCardBanlanceInsufficient
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputDeviceId
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputChargerSn
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_InputChargerMoney
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_EventNoticeTest
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_BanlanceInsufficient
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_VerifyCardFailure
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUi_Charging
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToUI_ReadCardSuccess
</UL>

<P><STRONG><a name="[235]"></a>UpdateSysToken</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, proto.o(i.UpdateSysToken))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceAesReq
</UL>

<P><STRONG><a name="[26c]"></a>UpgradeTimeOutProc</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, outnetproto.o(i.UpgradeTimeOutProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UpgradeTimeOutProc &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTask
</UL>

<P><STRONG><a name="[283]"></a>Upgrade_FlashCheck</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, upgrade.o(i.Upgrade_FlashCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Upgrade_FlashCheck &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteRead
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Write
</UL>

<P><STRONG><a name="[be]"></a>Upgrade_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, upgrade.o(i.Upgrade_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Upgrade_Init &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseAppBackup
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWUpgradeNotice
</UL>

<P><STRONG><a name="[ba]"></a>Upgrade_Write</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, upgrade.o(i.Upgrade_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Upgrade_Write &rArr; Upgrade_FlashCheck &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteUpdateInfo
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteAppBackup
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_FlashCheck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWDownLoad
</UL>

<P><STRONG><a name="[237]"></a>UsartFlush</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(i.UsartFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsartFlush
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutNetPktFuncy
</UL>

<P><STRONG><a name="[172]"></a>UsartGetOneData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usart.o(i.UsartGetOneData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UsartGetOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_S_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTask
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetline
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdChkNoSpace
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCheckRes
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPRSBuffer
</UL>

<P><STRONG><a name="[169]"></a>UsartGetline</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, sim800c.o(i.UsartGetline))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UsartGetline &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetOneData
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
</UL>

<P><STRONG><a name="[e7]"></a>UsartInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usart.o(i.UsartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UsartInit &rArr; Init_Uart1 &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart9
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart8
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart7
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart6
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart5
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart4
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart3
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart2
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart0
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[17e]"></a>UsartSend</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usart.o(i.UsartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuUartSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutNetPktFuncy
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData_HT7017
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTestPktAck
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCKBPkt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmdChkNoSpace
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[24d]"></a>Val</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, server.o(i.Val))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
</UL>

<P><STRONG><a name="[18d]"></a>WholeModuleHandle</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, card.o(i.WholeModuleHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = WholeModuleHandle &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteSysInfo
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTestPktAck
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBcd2str
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBasicInfoReportAck
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuleStatusSendProc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCKBData
</UL>

<P><STRONG><a name="[b6]"></a>WriteCfgInfo</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, server.o(i.WriteCfgInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WriteCfgInfo &rArr; GetNoZeroSum &rArr; GetPktSum
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteRead
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_PageErase
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteWrite
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoZeroSum
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStopTimeFuncy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargeChangePowerFuncy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerSn
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetChargerDeviceId
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueDevRegisterACK
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiYaoCardReadIDHandle
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputDeviceId
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerSn
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStop
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargingTime
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargerFullStop
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcChargerInfo
</UL>

<P><STRONG><a name="[116]"></a>WritePayCardHandle</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, card.o(i.WritePayCardHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = WritePayCardHandle &rArr; StartCharging &rArr; UpdataGunDataSum &rArr; FlashWriteSysInfo &rArr; SendEventNotice &rArr; SendProtoPkt &rArr; SocketSendData &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
</UL>

<P><STRONG><a name="[209]"></a>WriteToCardBlock</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, card.o(i.WriteToCardBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WriteToCardBlock &rArr; SendCKBPkt &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCKBPkt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
</UL>

<P><STRONG><a name="[16c]"></a>WriteUpdateInfo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, flash.o(i.WriteUpdateInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteUpdateInfo &rArr; BootSetReqInfo &rArr; HT_Flash_ByteWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootSetReqInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Write
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
</UL>

<P><STRONG><a name="[24b]"></a>Write_HistoryOrder</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, history_order.o(i.Write_HistoryOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Write_HistoryOrder &rArr; E2promWriteDataEx &rArr; at24c64_eepromWrite &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrderBuffStatus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_PageErase
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Flash_ByteWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2promWriteDataEx
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
</UL>

<P><STRONG><a name="[183]"></a>WritecalparaByGunId</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, emu.o(i.WritecalparaByGunId))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunChargingProc
</UL>

<P><STRONG><a name="[284]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e2]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[9c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Write
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenGunProc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCloseGunProc
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCharging
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCharging
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargeChangePowerFuncy
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptSuccessNotice
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CostTempCopy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStartPara
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakeReqProc
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetPullGunTime
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSetFullTime
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStopCharging
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueStartCharging
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueHistoryOrderEnsure
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWUpgradeNotice
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFWDownLoad
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueDevRegisterACK
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueCostTemplateDown
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsGetId2
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempNotice
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTask
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCostTemplate
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTask
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042b_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreGunStatus
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_next
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcGunStatus
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSysCfgInfo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HistoryOrder_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatHandle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSocketStateCheck
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVoiceChipPower
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDialValue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingProc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingCtrlProc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueUpLoadHistoryOrder
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemResetFlag
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCfgInit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSysCfgInfo
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTest
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTimeOutProc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutNetPktFuncy
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvAckProc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutOut485NetPkt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutSizeNetCheck
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNetConnetProc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_HistoryOrder
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remove_RecordOrder_first
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_first
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrderInfo
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunTurnOn
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGunStatu
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAlldata
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableZXIE
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmuMatrixInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLearnMatrix
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempGive
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePayCardHandle
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WholeModuleHandle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvBtData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardIDHandle
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock9Handle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAuthCardIDHandle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcKbStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcKBData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayCardConfirmAddEntranceGuard
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyModuleHandle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCardConfirmAddEntranceGuard
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCKBData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardPayCardReadIDHandle
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntranceGuardCardReadIDHandle
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbPowerOff
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBlueInfo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReadIDHandle
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardModuleHandle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuleStatusSendProc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtModuleHandle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_Handle_UpgradeInfo
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CB_DownFW
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayOn_direct
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_FlashCheck
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEmergencyCode
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateNewUiState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_Standby
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_RelayTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_EventNoticeTest
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_ipopen
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_reset
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_cpin
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_ack
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CSTT
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CSQ
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CSCLK
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CREG
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CIPSHUT
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CIPRXGET
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CIPMUX
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CIICR
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CGATT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_CCID
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_ATI
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_ATE
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_power_on
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_power_off
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKET_open_set
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdChkNoSpace
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCheckRes
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPRSBuffer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCcidSn
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim800cReconnect
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTurnOffLed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverInfo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcFuseBreak
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GunChargingProc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingTime
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsId2GetTimeStampAuthCode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsId2Decrypt
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketSendData
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCloseGun
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpgradeInfo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStopTime
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPullGunStop
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargingTime
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargerFullStop
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReqCostTemplate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProtoPkt
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteOpenGun
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCloseGun
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcEventNoticeAck
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcChargerInfo
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGunEmergency
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptAndCheckServeData
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c64_eepromWrite
</UL>

<P><STRONG><a name="[286]"></a>__0sprintf$8</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e3]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[140]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSocketStateCheck
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceBcd2str
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock9Handle
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAuthCardIDHandle
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putCharToKeyBuf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKET_open_set
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsId2GetTimeStampAuthCode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfsId2Decrypt
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketSendData
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
</UL>

<P><STRONG><a name="[82]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[233]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, proto.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceAesReq
</UL>

<P><STRONG><a name="[c5]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, blueproto.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCfgInfo
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueProtoProc
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTask
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyToUiProc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcKBData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCKBData
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayFour
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClrData
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlProc
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[2e4]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[2e5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2e6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2e7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[143]"></a>at24c64_eepromRead</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, flash.o(i.at24c64_eepromRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadSysInfo
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2promReadDataEx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadGunInfo
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadMatrix
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c64_eepromWrite
</UL>

<P><STRONG><a name="[144]"></a>at24c64_eepromWrite</STRONG> (Thumb, 396 bytes, Stack size 96 bytes, flash.o(i.at24c64_eepromWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = at24c64_eepromWrite &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c64_eepromRead
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2promWriteDataEx
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteData
</UL>

<P><STRONG><a name="[291]"></a>ceil10</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ui.o(i.ceil10))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEmergencyCode
</UL>

<P><STRONG><a name="[18b]"></a>check7017_sum</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, emu.o(i.check7017_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check7017_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
</UL>

<P><STRONG><a name="[23e]"></a>check_sum</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, simuart.o(i.check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuUartRecvByte
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimUartSendByte
</UL>

<P><STRONG><a name="[20d]"></a>clearKeyBuf</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ui.o(i.clearKeyBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clearKeyBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiStateLoop
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_Standby
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_RelayTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_EventNoticeTest
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_AdministratorTestMode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
</UL>

<P><STRONG><a name="[280]"></a>delCharFormKeyBuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ui.o(i.delCharFormKeyBuf))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_Standby
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_SetPrintSwitch
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_RelayTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputDeviceId
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerSn
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_EventNoticeTest
</UL>

<P><STRONG><a name="[292]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22e]"></a>delay_us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cpucfg.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042bSpeech
</UL>

<P><STRONG><a name="[3a]"></a>emuTask</STRONG> (Thumb, 694 bytes, Stack size 48 bytes, emu.o(i.emuTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = emuTask &rArr; AutoLearnMatrix &rArr; invNxN &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEventNotice
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecalpara
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAlldata
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invNxN
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCheckSum
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Write
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableZXIE
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmuMatrixInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecHandle
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLearnMatrix
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MainTask)
</UL>
<P><STRONG><a name="[28c]"></a>filterValue</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, emu.o(i.filterValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = filterValue
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAlldata
</UL>

<P><STRONG><a name="[3c]"></a>fputc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, server.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fputc &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[17c]"></a>gprs_power_off</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sim800c.o(i.gprs_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gprs_power_off &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReset
</UL>

<P><STRONG><a name="[17d]"></a>gprs_power_on</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sim800c.o(i.gprs_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gprs_power_on &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReset
</UL>

<P><STRONG><a name="[ad]"></a>invNxN</STRONG> (Thumb, 834 bytes, Stack size 664 bytes, emu.o(i.invNxN))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = invNxN &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLearnMatrix
</UL>

<P><STRONG><a name="[281]"></a>isEmergencyCode</STRONG> (Thumb, 434 bytes, Stack size 64 bytes, ui.o(i.isEmergencyCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = isEmergencyCode &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtcCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil10
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_Standby
</UL>

<P><STRONG><a name="[20f]"></a>isTradeIndexTrue</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, history_order.o(i.isTradeIndexTrue))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HistoryOrder_next
</UL>

<P><STRONG><a name="[30]"></a>main</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[294]"></a>matprod</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, emu.o(i.matprod))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = matprod &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAlldata
</UL>

<P><STRONG><a name="[9e]"></a>md5</STRONG> (Thumb, 664 bytes, Stack size 160 bytes, md5.o(i.md5))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = md5 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_int32
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_bytes
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesInfoHandle
</UL>

<P><STRONG><a name="[21e]"></a>openRelay_Async</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, relayctrltask.o(i.openRelay_Async))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = openRelay_Async &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayOn_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl
</UL>

<P><STRONG><a name="[27f]"></a>putCharToKeyBuf</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ui.o(i.putCharToKeyBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = putCharToKeyBuf &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_Standby
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_SetPrintSwitch
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_RelayTest
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputDeviceId
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerSn
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputChargerMoney
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_EventNoticeTest
</UL>

<P><STRONG><a name="[2b5]"></a>pvPortMalloc</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[2c4]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2ad]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[28b]"></a>readAlldata</STRONG> (Thumb, 1354 bytes, Stack size 40 bytes, emu.o(i.readAlldata))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = readAlldata &rArr; readVol &rArr; HT7017_Read &rArr; SendData_HT7017 &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readVol
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPow
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCur
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matprod
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterValue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
</UL>

<P><STRONG><a name="[2ba]"></a>readCur</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, emu.o(i.readCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = readCur &rArr; HT7017_Read &rArr; SendData_HT7017 &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAlldata
</UL>

<P><STRONG><a name="[2b9]"></a>readPow</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, emu.o(i.readPow))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = readPow &rArr; HT7017_Read &rArr; SendData_HT7017 &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAlldata
</UL>

<P><STRONG><a name="[2b8]"></a>readVol</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, emu.o(i.readVol))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = readVol &rArr; HT7017_Read &rArr; SendData_HT7017 &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAlldata
</UL>

<P><STRONG><a name="[21f]"></a>relayOn_direct</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, relayctrltask.o(i.relayOn_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = relayOn_direct &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrl
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay_Async
</UL>

<P><STRONG><a name="[168]"></a>restoi</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, sim800c.o(i.restoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = restoi &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
</UL>

<P><STRONG><a name="[42]"></a>sim800_check_ATE</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sim800c.o(i.sim800_check_ATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sim800_check_ATE &rArr; CheckModeCmd &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModeCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>sim800_check_ATI</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sim800c.o(i.sim800_check_ATI))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sim800_check_ATI &rArr; CheckModeCmd &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModeCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>sim800_check_CCID</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sim800c.o(i.sim800_check_CCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sim800_check_CCID &rArr; CheckModeCmd &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModeCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>sim800_check_CGATT</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sim800c.o(i.sim800_check_CGATT))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sim800_check_CGATT &rArr; CheckModeCmd &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModeCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>sim800_check_CIICR</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sim800c.o(i.sim800_check_CIICR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sim800_check_CIICR &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>sim800_check_CIPMUX</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sim800c.o(i.sim800_check_CIPMUX))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sim800_check_CIPMUX &rArr; CheckModeCmd &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModeCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>sim800_check_CIPRXGET</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sim800c.o(i.sim800_check_CIPRXGET))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sim800_check_CIPRXGET &rArr; CheckModeCmd &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModeCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>sim800_check_CIPSHUT</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sim800c.o(i.sim800_check_CIPSHUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sim800_check_CIPSHUT &rArr; CheckModeCmd &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModeCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>sim800_check_CREG</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sim800c.o(i.sim800_check_CREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sim800_check_CREG &rArr; CheckModeCmd &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModeCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>sim800_check_CSCLK</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sim800c.o(i.sim800_check_CSCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sim800_check_CSCLK &rArr; CheckModeCmd &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModeCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>sim800_check_CSQ</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sim800c.o(i.sim800_check_CSQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sim800_check_CSQ &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>sim800_check_CSTT</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sim800c.o(i.sim800_check_CSTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sim800_check_CSTT &rArr; CheckModeCmd &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModeCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>sim800_check_ack</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sim800c.o(i.sim800_check_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sim800_check_ack &rArr; CheckModeCmd &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModeCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>sim800_check_cpin</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sim800c.o(i.sim800_check_cpin))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sim800_check_cpin &rArr; CheckModeCmd &rArr; OptFailNotice &rArr; SoundCode &rArr; Sc8042bSpeech &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModeCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>sim800_check_reset</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, sim800c.o(i.sim800_check_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sim800_check_reset &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>sim800_default</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sim800c.o(i.sim800_default))
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>sim800_ipopen</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, sim800c.o(i.sim800_ipopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = sim800_ipopen &rArr; SOCKET_open_set &rArr; GprsSendCmd &rArr; GprsCheckRes &rArr; GetSocketState &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptFailNotice
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKET_open_set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim800c.o(.constdata)
</UL>
<P><STRONG><a name="[289]"></a>timer2_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, emu.o(i.timer2_init))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
</UL>

<P><STRONG><a name="[24a]"></a>timer4_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, relayctrltask.o(i.timer4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer4_init &rArr; HT_CMU_ClkCtrl1Config
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_CMU_ClkCtrl1Config
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_5_Cmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TMR_PeriodSet
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TMR_ITConfig
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TMRExt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRelayTimer
</UL>

<P><STRONG><a name="[295]"></a>to_bytes</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, md5.o(i.to_bytes))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[296]"></a>to_int32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, md5.o(i.to_int32))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[179]"></a>trim</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sim800c.o(i.trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = trim
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdChkNoSpace
</UL>

<P><STRONG><a name="[ab]"></a>updateMatrix</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, emu.o(i.updateMatrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = updateMatrix &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLearnMatrix
</UL>

<P><STRONG><a name="[299]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[2ae]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[2ac]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[29b]"></a>vListInsert</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[29a]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[29d]"></a>vPortEnterCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[29f]"></a>vPortExitCritical</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[2a7]"></a>vPortFree</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[2a8]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[e9]"></a>vTaskDelay</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBlueNetPkt
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSysTem
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptSuccessNotice
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShakeReqProc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempNotice
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTask
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargingSend
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTask
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sc8042b_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrlTask
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CkbTask
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingCtrlProc
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdTest
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDataHandle
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutOut485NetPkt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PktRecvProc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutSizeNetCheck
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Read
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechCardBalance
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePayCardHandle
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetKeyBoard
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPayCardBlock8Handle
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAuthCardIDHandle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiYaoCardReadIDHandle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtModuleHandle
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChargeSpeech
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechStartCharge
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UiKeyHandle_InputSocketNum
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaymentCardSpeechStartCharge
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_ipopen
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim800_check_reset
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_power_on
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetline
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendCmdChkNoSpace
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCmdChkNoSpace
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsCheckRes
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim800cReconnect
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechChargeing
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundCode
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketSendData
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGet
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpgradeInfo
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvServerData
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeechPile
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundNumber
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c64_eepromWrite
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteData
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuUartSendData
</UL>

<P><STRONG><a name="[23c]"></a>vTaskDelete</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpgradeInfo
</UL>

<P><STRONG><a name="[2b4]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2be]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2bf]"></a>vTaskPriorityInherit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2c5]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[293]"></a>vTaskStartScheduler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a1]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[5e]"></a>vTaskSwitchContext</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[28a]"></a>writecalpara</STRONG> (Thumb, 450 bytes, Stack size 16 bytes, emu.o(i.writecalpara))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = writecalpara &rArr; HT7017_Write &rArr; SendData_HT7017 &rArr; UsartSend &rArr; SimuUartSendData &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT7017_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emuTask
</UL>

<P><STRONG><a name="[2c0]"></a>xPortStartScheduler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[220]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrlTask
</UL>

<P><STRONG><a name="[2c3]"></a>xQueueGenericCreate</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[221]"></a>xQueueGenericReceive</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrlTask
</UL>

<P><STRONG><a name="[2aa]"></a>xQueueGenericReset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[297]"></a>xQueueGenericSend</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openRelay_Async
</UL>

<P><STRONG><a name="[2c6]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1da]"></a>xTaskCreate</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[1ea]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuxSempTake
</UL>

<P><STRONG><a name="[222]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelayCtrlTask
</UL>

<P><STRONG><a name="[26e]"></a>xTaskIncrementTick</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2a6]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[2b2]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[2a2]"></a>xTaskResumeAll</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ac]"></a>SaveEmuCalation</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, emu.o(i.SaveEmuCalation))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SaveEmuCalation &rArr; FlashWritMatrix &rArr; EepromWriteData &rArr; at24c64_eepromWrite &rArr; at24c64_eepromRead &rArr; I2C_ReadNByte &rArr; MuxSempGive &rArr; GetCurrentTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPktSum
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWritMatrix
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmuMatrixInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLearnMatrix
</UL>

<P><STRONG><a name="[a8]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, gun.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttGpioInit
</UL>

<P><STRONG><a name="[195]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[197]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[196]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, i2c.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[1d7]"></a>HT_LCD_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcd.o(i.HT_LCD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
</UL>

<P><STRONG><a name="[1b2]"></a>HT_LCD_Read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd.o(i.HT_LCD_Read))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayZero
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayTwo
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayThree
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySix
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplaySeven
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayOne
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayNine
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayFour
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayFive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplayEight
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClrData
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDisplay
</UL>

<P><STRONG><a name="[1d6]"></a>Lcd_All_SegCom_IO_Config</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lcd.o(i.Lcd_All_SegCom_IO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Lcd_All_SegCom_IO_Config &rArr; GPIO_Cfg &rArr; HT_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
</UL>

<P><STRONG><a name="[22c]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rtc.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[242]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, simuart.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuartGpioInit
</UL>

<P><STRONG><a name="[244]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, simuart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuartInit
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuartGpioInit
</UL>

<P><STRONG><a name="[243]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, simuart.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimuartGpioInit
</UL>

<P><STRONG><a name="[270]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, systick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[19f]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart6
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart5
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart4
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart3
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart2
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart0
</UL>

<P><STRONG><a name="[19d]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart6
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart5
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart4
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart3
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart2
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart0
</UL>

<P><STRONG><a name="[1a1]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart6
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart5
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart4
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart3
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart2
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart0
</UL>

<P><STRONG><a name="[1a0]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, usart.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart6
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart5
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart4
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart3
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart2
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart0
</UL>

<P><STRONG><a name="[2a4]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2a5]"></a>prvCopyDataToQueue</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[2a9]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[2af]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2b0]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2b1]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, queue.o(i.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2b3]"></a>prvUnlockQueue</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[298]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[29c]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2a0]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2a3]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[40]"></a>prvIdleTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[2ab]"></a>prvInitialiseNewTask</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[29e]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[2bd]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[2c1]"></a>prvSetupTimerInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port.o(i.prvSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[3f]"></a>prvTaskExitError</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[2b6]"></a>prvHeapInit</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[2b7]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[285]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[288]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[287]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[35]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[86]"></a>_scanf_int</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[85]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[84]"></a>_scanf_real</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<HR></body></html>
